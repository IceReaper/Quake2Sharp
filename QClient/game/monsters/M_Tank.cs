/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
namespace QClient.game.monsters;

using adapters;
using types;
using util;

public class M_Tank
{
	// G:\quake2\baseq2\models/monsters/tank

	// This file generated by qdata - Do NOT Modify
	public static readonly int FRAME_stand01 = 0;
	public static readonly int FRAME_stand02 = 1;
	public static readonly int FRAME_stand03 = 2;
	public static readonly int FRAME_stand04 = 3;
	public static readonly int FRAME_stand05 = 4;
	public static readonly int FRAME_stand06 = 5;
	public static readonly int FRAME_stand07 = 6;
	public static readonly int FRAME_stand08 = 7;
	public static readonly int FRAME_stand09 = 8;
	public static readonly int FRAME_stand10 = 9;
	public static readonly int FRAME_stand11 = 10;
	public static readonly int FRAME_stand12 = 11;
	public static readonly int FRAME_stand13 = 12;
	public static readonly int FRAME_stand14 = 13;
	public static readonly int FRAME_stand15 = 14;
	public static readonly int FRAME_stand16 = 15;
	public static readonly int FRAME_stand17 = 16;
	public static readonly int FRAME_stand18 = 17;
	public static readonly int FRAME_stand19 = 18;
	public static readonly int FRAME_stand20 = 19;
	public static readonly int FRAME_stand21 = 20;
	public static readonly int FRAME_stand22 = 21;
	public static readonly int FRAME_stand23 = 22;
	public static readonly int FRAME_stand24 = 23;
	public static readonly int FRAME_stand25 = 24;
	public static readonly int FRAME_stand26 = 25;
	public static readonly int FRAME_stand27 = 26;
	public static readonly int FRAME_stand28 = 27;
	public static readonly int FRAME_stand29 = 28;
	public static readonly int FRAME_stand30 = 29;
	public static readonly int FRAME_walk01 = 30;
	public static readonly int FRAME_walk02 = 31;
	public static readonly int FRAME_walk03 = 32;
	public static readonly int FRAME_walk04 = 33;
	public static readonly int FRAME_walk05 = 34;
	public static readonly int FRAME_walk06 = 35;
	public static readonly int FRAME_walk07 = 36;
	public static readonly int FRAME_walk08 = 37;
	public static readonly int FRAME_walk09 = 38;
	public static readonly int FRAME_walk10 = 39;
	public static readonly int FRAME_walk11 = 40;
	public static readonly int FRAME_walk12 = 41;
	public static readonly int FRAME_walk13 = 42;
	public static readonly int FRAME_walk14 = 43;
	public static readonly int FRAME_walk15 = 44;
	public static readonly int FRAME_walk16 = 45;
	public static readonly int FRAME_walk17 = 46;
	public static readonly int FRAME_walk18 = 47;
	public static readonly int FRAME_walk19 = 48;
	public static readonly int FRAME_walk20 = 49;
	public static readonly int FRAME_walk21 = 50;
	public static readonly int FRAME_walk22 = 51;
	public static readonly int FRAME_walk23 = 52;
	public static readonly int FRAME_walk24 = 53;
	public static readonly int FRAME_walk25 = 54;
	public static readonly int FRAME_attak101 = 55;
	public static readonly int FRAME_attak102 = 56;
	public static readonly int FRAME_attak103 = 57;
	public static readonly int FRAME_attak104 = 58;
	public static readonly int FRAME_attak105 = 59;
	public static readonly int FRAME_attak106 = 60;
	public static readonly int FRAME_attak107 = 61;
	public static readonly int FRAME_attak108 = 62;
	public static readonly int FRAME_attak109 = 63;
	public static readonly int FRAME_attak110 = 64;
	public static readonly int FRAME_attak111 = 65;
	public static readonly int FRAME_attak112 = 66;
	public static readonly int FRAME_attak113 = 67;
	public static readonly int FRAME_attak114 = 68;
	public static readonly int FRAME_attak115 = 69;
	public static readonly int FRAME_attak116 = 70;
	public static readonly int FRAME_attak117 = 71;
	public static readonly int FRAME_attak118 = 72;
	public static readonly int FRAME_attak119 = 73;
	public static readonly int FRAME_attak120 = 74;
	public static readonly int FRAME_attak121 = 75;
	public static readonly int FRAME_attak122 = 76;
	public static readonly int FRAME_attak201 = 77;
	public static readonly int FRAME_attak202 = 78;
	public static readonly int FRAME_attak203 = 79;
	public static readonly int FRAME_attak204 = 80;
	public static readonly int FRAME_attak205 = 81;
	public static readonly int FRAME_attak206 = 82;
	public static readonly int FRAME_attak207 = 83;
	public static readonly int FRAME_attak208 = 84;
	public static readonly int FRAME_attak209 = 85;
	public static readonly int FRAME_attak210 = 86;
	public static readonly int FRAME_attak211 = 87;
	public static readonly int FRAME_attak212 = 88;
	public static readonly int FRAME_attak213 = 89;
	public static readonly int FRAME_attak214 = 90;
	public static readonly int FRAME_attak215 = 91;
	public static readonly int FRAME_attak216 = 92;
	public static readonly int FRAME_attak217 = 93;
	public static readonly int FRAME_attak218 = 94;
	public static readonly int FRAME_attak219 = 95;
	public static readonly int FRAME_attak220 = 96;
	public static readonly int FRAME_attak221 = 97;
	public static readonly int FRAME_attak222 = 98;
	public static readonly int FRAME_attak223 = 99;
	public static readonly int FRAME_attak224 = 100;
	public static readonly int FRAME_attak225 = 101;
	public static readonly int FRAME_attak226 = 102;
	public static readonly int FRAME_attak227 = 103;
	public static readonly int FRAME_attak228 = 104;
	public static readonly int FRAME_attak229 = 105;
	public static readonly int FRAME_attak230 = 106;
	public static readonly int FRAME_attak231 = 107;
	public static readonly int FRAME_attak232 = 108;
	public static readonly int FRAME_attak233 = 109;
	public static readonly int FRAME_attak234 = 110;
	public static readonly int FRAME_attak235 = 111;
	public static readonly int FRAME_attak236 = 112;
	public static readonly int FRAME_attak237 = 113;
	public static readonly int FRAME_attak238 = 114;
	public static readonly int FRAME_attak301 = 115;
	public static readonly int FRAME_attak302 = 116;
	public static readonly int FRAME_attak303 = 117;
	public static readonly int FRAME_attak304 = 118;
	public static readonly int FRAME_attak305 = 119;
	public static readonly int FRAME_attak306 = 120;
	public static readonly int FRAME_attak307 = 121;
	public static readonly int FRAME_attak308 = 122;
	public static readonly int FRAME_attak309 = 123;
	public static readonly int FRAME_attak310 = 124;
	public static readonly int FRAME_attak311 = 125;
	public static readonly int FRAME_attak312 = 126;
	public static readonly int FRAME_attak313 = 127;
	public static readonly int FRAME_attak314 = 128;
	public static readonly int FRAME_attak315 = 129;
	public static readonly int FRAME_attak316 = 130;
	public static readonly int FRAME_attak317 = 131;
	public static readonly int FRAME_attak318 = 132;
	public static readonly int FRAME_attak319 = 133;
	public static readonly int FRAME_attak320 = 134;
	public static readonly int FRAME_attak321 = 135;
	public static readonly int FRAME_attak322 = 136;
	public static readonly int FRAME_attak323 = 137;
	public static readonly int FRAME_attak324 = 138;
	public static readonly int FRAME_attak325 = 139;
	public static readonly int FRAME_attak326 = 140;
	public static readonly int FRAME_attak327 = 141;
	public static readonly int FRAME_attak328 = 142;
	public static readonly int FRAME_attak329 = 143;
	public static readonly int FRAME_attak330 = 144;
	public static readonly int FRAME_attak331 = 145;
	public static readonly int FRAME_attak332 = 146;
	public static readonly int FRAME_attak333 = 147;
	public static readonly int FRAME_attak334 = 148;
	public static readonly int FRAME_attak335 = 149;
	public static readonly int FRAME_attak336 = 150;
	public static readonly int FRAME_attak337 = 151;
	public static readonly int FRAME_attak338 = 152;
	public static readonly int FRAME_attak339 = 153;
	public static readonly int FRAME_attak340 = 154;
	public static readonly int FRAME_attak341 = 155;
	public static readonly int FRAME_attak342 = 156;
	public static readonly int FRAME_attak343 = 157;
	public static readonly int FRAME_attak344 = 158;
	public static readonly int FRAME_attak345 = 159;
	public static readonly int FRAME_attak346 = 160;
	public static readonly int FRAME_attak347 = 161;
	public static readonly int FRAME_attak348 = 162;
	public static readonly int FRAME_attak349 = 163;
	public static readonly int FRAME_attak350 = 164;
	public static readonly int FRAME_attak351 = 165;
	public static readonly int FRAME_attak352 = 166;
	public static readonly int FRAME_attak353 = 167;
	public static readonly int FRAME_attak401 = 168;
	public static readonly int FRAME_attak402 = 169;
	public static readonly int FRAME_attak403 = 170;
	public static readonly int FRAME_attak404 = 171;
	public static readonly int FRAME_attak405 = 172;
	public static readonly int FRAME_attak406 = 173;
	public static readonly int FRAME_attak407 = 174;
	public static readonly int FRAME_attak408 = 175;
	public static readonly int FRAME_attak409 = 176;
	public static readonly int FRAME_attak410 = 177;
	public static readonly int FRAME_attak411 = 178;
	public static readonly int FRAME_attak412 = 179;
	public static readonly int FRAME_attak413 = 180;
	public static readonly int FRAME_attak414 = 181;
	public static readonly int FRAME_attak415 = 182;
	public static readonly int FRAME_attak416 = 183;
	public static readonly int FRAME_attak417 = 184;
	public static readonly int FRAME_attak418 = 185;
	public static readonly int FRAME_attak419 = 186;
	public static readonly int FRAME_attak420 = 187;
	public static readonly int FRAME_attak421 = 188;
	public static readonly int FRAME_attak422 = 189;
	public static readonly int FRAME_attak423 = 190;
	public static readonly int FRAME_attak424 = 191;
	public static readonly int FRAME_attak425 = 192;
	public static readonly int FRAME_attak426 = 193;
	public static readonly int FRAME_attak427 = 194;
	public static readonly int FRAME_attak428 = 195;
	public static readonly int FRAME_attak429 = 196;
	public static readonly int FRAME_pain101 = 197;
	public static readonly int FRAME_pain102 = 198;
	public static readonly int FRAME_pain103 = 199;
	public static readonly int FRAME_pain104 = 200;
	public static readonly int FRAME_pain201 = 201;
	public static readonly int FRAME_pain202 = 202;
	public static readonly int FRAME_pain203 = 203;
	public static readonly int FRAME_pain204 = 204;
	public static readonly int FRAME_pain205 = 205;
	public static readonly int FRAME_pain301 = 206;
	public static readonly int FRAME_pain302 = 207;
	public static readonly int FRAME_pain303 = 208;
	public static readonly int FRAME_pain304 = 209;
	public static readonly int FRAME_pain305 = 210;
	public static readonly int FRAME_pain306 = 211;
	public static readonly int FRAME_pain307 = 212;
	public static readonly int FRAME_pain308 = 213;
	public static readonly int FRAME_pain309 = 214;
	public static readonly int FRAME_pain310 = 215;
	public static readonly int FRAME_pain311 = 216;
	public static readonly int FRAME_pain312 = 217;
	public static readonly int FRAME_pain313 = 218;
	public static readonly int FRAME_pain314 = 219;
	public static readonly int FRAME_pain315 = 220;
	public static readonly int FRAME_pain316 = 221;
	public static readonly int FRAME_death101 = 222;
	public static readonly int FRAME_death102 = 223;
	public static readonly int FRAME_death103 = 224;
	public static readonly int FRAME_death104 = 225;
	public static readonly int FRAME_death105 = 226;
	public static readonly int FRAME_death106 = 227;
	public static readonly int FRAME_death107 = 228;
	public static readonly int FRAME_death108 = 229;
	public static readonly int FRAME_death109 = 230;
	public static readonly int FRAME_death110 = 231;
	public static readonly int FRAME_death111 = 232;
	public static readonly int FRAME_death112 = 233;
	public static readonly int FRAME_death113 = 234;
	public static readonly int FRAME_death114 = 235;
	public static readonly int FRAME_death115 = 236;
	public static readonly int FRAME_death116 = 237;
	public static readonly int FRAME_death117 = 238;
	public static readonly int FRAME_death118 = 239;
	public static readonly int FRAME_death119 = 240;
	public static readonly int FRAME_death120 = 241;
	public static readonly int FRAME_death121 = 242;
	public static readonly int FRAME_death122 = 243;
	public static readonly int FRAME_death123 = 244;
	public static readonly int FRAME_death124 = 245;
	public static readonly int FRAME_death125 = 246;
	public static readonly int FRAME_death126 = 247;
	public static readonly int FRAME_death127 = 248;
	public static readonly int FRAME_death128 = 249;
	public static readonly int FRAME_death129 = 250;
	public static readonly int FRAME_death130 = 251;
	public static readonly int FRAME_death131 = 252;
	public static readonly int FRAME_death132 = 253;
	public static readonly int FRAME_recln101 = 254;
	public static readonly int FRAME_recln102 = 255;
	public static readonly int FRAME_recln103 = 256;
	public static readonly int FRAME_recln104 = 257;
	public static readonly int FRAME_recln105 = 258;
	public static readonly int FRAME_recln106 = 259;
	public static readonly int FRAME_recln107 = 260;
	public static readonly int FRAME_recln108 = 261;
	public static readonly int FRAME_recln109 = 262;
	public static readonly int FRAME_recln110 = 263;
	public static readonly int FRAME_recln111 = 264;
	public static readonly int FRAME_recln112 = 265;
	public static readonly int FRAME_recln113 = 266;
	public static readonly int FRAME_recln114 = 267;
	public static readonly int FRAME_recln115 = 268;
	public static readonly int FRAME_recln116 = 269;
	public static readonly int FRAME_recln117 = 270;
	public static readonly int FRAME_recln118 = 271;
	public static readonly int FRAME_recln119 = 272;
	public static readonly int FRAME_recln120 = 273;
	public static readonly int FRAME_recln121 = 274;
	public static readonly int FRAME_recln122 = 275;
	public static readonly int FRAME_recln123 = 276;
	public static readonly int FRAME_recln124 = 277;
	public static readonly int FRAME_recln125 = 278;
	public static readonly int FRAME_recln126 = 279;
	public static readonly int FRAME_recln127 = 280;
	public static readonly int FRAME_recln128 = 281;
	public static readonly int FRAME_recln129 = 282;
	public static readonly int FRAME_recln130 = 283;
	public static readonly int FRAME_recln131 = 284;
	public static readonly int FRAME_recln132 = 285;
	public static readonly int FRAME_recln133 = 286;
	public static readonly int FRAME_recln134 = 287;
	public static readonly int FRAME_recln135 = 288;
	public static readonly int FRAME_recln136 = 289;
	public static readonly int FRAME_recln137 = 290;
	public static readonly int FRAME_recln138 = 291;
	public static readonly int FRAME_recln139 = 292;
	public static readonly int FRAME_recln140 = 293;
	public static readonly float MODEL_SCALE = 1.000000f;
	private static int sound_thud;
	private static int sound_pain;
	private static int sound_idle;
	private static int sound_die;
	private static int sound_step;
	private static int sound_sight;
	private static int sound_windup;
	private static int sound_strike;

	//
	// misc
	//

	private static readonly EntInteractAdapter tank_sight = new("tank_sight", (self, other) =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Tank.sound_sight, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter tank_footstep = new("tank_footstep", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_BODY, M_Tank.sound_step, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter tank_thud = new("tank_thud", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_BODY, M_Tank.sound_thud, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter tank_windup = new("tank_windup", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_WEAPON, M_Tank.sound_windup, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter tank_idle = new("tank_idle", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Tank.sound_idle, 1, Defines.ATTN_IDLE, 0);

		return true;
	});

	//
	// stand
	//

	private static readonly mframe_t[] tank_frames_stand =
	{
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null)
	};

	private static readonly mmove_t tank_move_stand = new(M_Tank.FRAME_stand01, M_Tank.FRAME_stand30, M_Tank.tank_frames_stand, null);

	private static readonly EntThinkAdapter tank_stand = new("tank_stand", self =>
	{
		self.monsterinfo.currentmove = M_Tank.tank_move_stand;

		return true;
	});

	//
	// walk
	//
	private static readonly EntThinkAdapter tank_run = new("tank_run", self =>
	{
		if (self.enemy != null && self.enemy.client != null)
			self.monsterinfo.aiflags |= Defines.AI_BRUTAL;
		else
			self.monsterinfo.aiflags &= ~Defines.AI_BRUTAL;

		if ((self.monsterinfo.aiflags & Defines.AI_STAND_GROUND) != 0)
		{
			self.monsterinfo.currentmove = M_Tank.tank_move_stand;

			return true;
		}

		if (self.monsterinfo.currentmove == M_Tank.tank_move_walk || self.monsterinfo.currentmove == M_Tank.tank_move_start_run)
			self.monsterinfo.currentmove = M_Tank.tank_move_run;
		else
			self.monsterinfo.currentmove = M_Tank.tank_move_start_run;

		return true;
	});

	private static readonly EntThinkAdapter tank_walk = new("tank_walk", self =>
	{
		self.monsterinfo.currentmove = M_Tank.tank_move_walk;

		return true;
	});

	private static readonly mframe_t[] tank_frames_start_walk =
	{
		new(GameAI.ai_walk, 0, null), new(GameAI.ai_walk, 6, null), new(GameAI.ai_walk, 6, null), new(GameAI.ai_walk, 11, M_Tank.tank_footstep)
	};

	private static mmove_t tank_move_start_walk = new(M_Tank.FRAME_walk01, M_Tank.FRAME_walk04, M_Tank.tank_frames_start_walk, M_Tank.tank_walk);

	private static readonly mframe_t[] tank_frames_walk =
	{
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 3, null),
		new(GameAI.ai_walk, 2, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, M_Tank.tank_footstep),
		new(GameAI.ai_walk, 3, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 7, null),
		new(GameAI.ai_walk, 7, null),
		new(GameAI.ai_walk, 6, null),
		new(GameAI.ai_walk, 6, M_Tank.tank_footstep)
	};

	private static readonly mmove_t tank_move_walk = new(M_Tank.FRAME_walk05, M_Tank.FRAME_walk20, M_Tank.tank_frames_walk, null);

	private static readonly mframe_t[] tank_frames_stop_walk =
	{
		new(GameAI.ai_walk, 3, null),
		new(GameAI.ai_walk, 3, null),
		new(GameAI.ai_walk, 2, null),
		new(GameAI.ai_walk, 2, null),
		new(GameAI.ai_walk, 4, M_Tank.tank_footstep)
	};

	private static mmove_t tank_move_stop_walk = new(M_Tank.FRAME_walk21, M_Tank.FRAME_walk25, M_Tank.tank_frames_stop_walk, M_Tank.tank_stand);

	//
	// run
	//

	private static readonly mframe_t[] tank_frames_start_run =
	{
		new(GameAI.ai_run, 0, null), new(GameAI.ai_run, 6, null), new(GameAI.ai_run, 6, null), new(GameAI.ai_run, 11, M_Tank.tank_footstep)
	};

	private static readonly mmove_t tank_move_start_run = new(M_Tank.FRAME_walk01, M_Tank.FRAME_walk04, M_Tank.tank_frames_start_run, M_Tank.tank_run);

	private static readonly mframe_t[] tank_frames_run =
	{
		new(GameAI.ai_run, 4, null),
		new(GameAI.ai_run, 5, null),
		new(GameAI.ai_run, 3, null),
		new(GameAI.ai_run, 2, null),
		new(GameAI.ai_run, 5, null),
		new(GameAI.ai_run, 5, null),
		new(GameAI.ai_run, 4, null),
		new(GameAI.ai_run, 4, M_Tank.tank_footstep),
		new(GameAI.ai_run, 3, null),
		new(GameAI.ai_run, 5, null),
		new(GameAI.ai_run, 4, null),
		new(GameAI.ai_run, 5, null),
		new(GameAI.ai_run, 7, null),
		new(GameAI.ai_run, 7, null),
		new(GameAI.ai_run, 6, null),
		new(GameAI.ai_run, 6, M_Tank.tank_footstep)
	};

	private static readonly mmove_t tank_move_run = new(M_Tank.FRAME_walk05, M_Tank.FRAME_walk20, M_Tank.tank_frames_run, null);

	private static readonly mframe_t[] tank_frames_stop_run =
	{
		new(GameAI.ai_run, 3, null),
		new(GameAI.ai_run, 3, null),
		new(GameAI.ai_run, 2, null),
		new(GameAI.ai_run, 2, null),
		new(GameAI.ai_run, 4, M_Tank.tank_footstep)
	};

	private static mmove_t tank_move_stop_run = new(M_Tank.FRAME_walk21, M_Tank.FRAME_walk25, M_Tank.tank_frames_stop_run, M_Tank.tank_walk);

	//
	// pain
	//

	private static readonly mframe_t[] tank_frames_pain1 =
	{
		new(GameAI.ai_move, 0, null), new(GameAI.ai_move, 0, null), new(GameAI.ai_move, 0, null), new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t tank_move_pain1 = new(M_Tank.FRAME_pain101, M_Tank.FRAME_pain104, M_Tank.tank_frames_pain1, M_Tank.tank_run);

	private static readonly mframe_t[] tank_frames_pain2 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t tank_move_pain2 = new(M_Tank.FRAME_pain201, M_Tank.FRAME_pain205, M_Tank.tank_frames_pain2, M_Tank.tank_run);

	private static readonly mframe_t[] tank_frames_pain3 =
	{
		new(GameAI.ai_move, -7, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, M_Tank.tank_footstep)
	};

	private static readonly mmove_t tank_move_pain3 = new(M_Tank.FRAME_pain301, M_Tank.FRAME_pain316, M_Tank.tank_frames_pain3, M_Tank.tank_run);

	private static readonly EntPainAdapter tank_pain = new("tank_pain", (self, other, kick, damage) =>
	{
		if (self.health < self.max_health / 2)
			self.s.skinnum |= 1;

		if (damage <= 10)
			return;

		if (GameBase.level.time < self.pain_debounce_time)
			return;

		if (damage <= 30)
		{
			if (Lib.random() > 0.2)
				return;
		}

		// If hard or nightmare, don't go into pain while attacking
		if (GameBase.skill.value >= 2)
		{
			if (self.s.frame >= M_Tank.FRAME_attak301 && self.s.frame <= M_Tank.FRAME_attak330)
				return;

			if (self.s.frame >= M_Tank.FRAME_attak101 && self.s.frame <= M_Tank.FRAME_attak116)
				return;
		}

		self.pain_debounce_time = GameBase.level.time + 3;
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Tank.sound_pain, 1, Defines.ATTN_NORM, 0);

		if (GameBase.skill.value == 3)
			return; // no pain anims in nightmare

		if (damage <= 30)
			self.monsterinfo.currentmove = M_Tank.tank_move_pain1;
		else if (damage <= 60)
			self.monsterinfo.currentmove = M_Tank.tank_move_pain2;
		else
			self.monsterinfo.currentmove = M_Tank.tank_move_pain3;
	});

	//
	// attacks
	//

	private static readonly EntThinkAdapter TankBlaster = new("TankBlaster", self =>
	{
		float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
		float[] start = { 0, 0, 0 };
		float[] end = { 0, 0, 0 };
		float[] dir = { 0, 0, 0 };
		int flash_number;

		if (self.s.frame == M_Tank.FRAME_attak110)
			flash_number = Defines.MZ2_TANK_BLASTER_1;
		else if (self.s.frame == M_Tank.FRAME_attak113)
			flash_number = Defines.MZ2_TANK_BLASTER_2;
		else

			// (self.s.frame == FRAME_attak116)
			flash_number = Defines.MZ2_TANK_BLASTER_3;

		Math3D.AngleVectors(self.s.angles, forward, right, null);
		Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start);

		Math3D.VectorCopy(self.enemy.s.origin, end);
		end[2] += self.enemy.viewheight;
		Math3D.VectorSubtract(end, start, dir);

		Monster.monster_fire_blaster(self, start, dir, 30, 800, flash_number, Defines.EF_BLASTER);

		return true;
	});

	private static readonly EntThinkAdapter TankStrike = new("TankStrike", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_WEAPON, M_Tank.sound_strike, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter TankRocket = new("TankRocket", self =>
	{
		float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
		float[] start = { 0, 0, 0 };
		float[] dir = { 0, 0, 0 };
		float[] vec = { 0, 0, 0 };
		int flash_number;

		if (self.s.frame == M_Tank.FRAME_attak324)
			flash_number = Defines.MZ2_TANK_ROCKET_1;
		else if (self.s.frame == M_Tank.FRAME_attak327)
			flash_number = Defines.MZ2_TANK_ROCKET_2;
		else

			// (self.s.frame == FRAME_attak330)
			flash_number = Defines.MZ2_TANK_ROCKET_3;

		Math3D.AngleVectors(self.s.angles, forward, right, null);
		Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start);

		Math3D.VectorCopy(self.enemy.s.origin, vec);
		vec[2] += self.enemy.viewheight;
		Math3D.VectorSubtract(vec, start, dir);
		Math3D.VectorNormalize(dir);

		Monster.monster_fire_rocket(self, start, dir, 50, 550, flash_number);

		return true;
	});

	private static readonly EntThinkAdapter TankMachineGun = new("TankMachineGun", self =>
	{
		float[] dir = { 0, 0, 0 };
		float[] vec = { 0, 0, 0 };
		float[] start = { 0, 0, 0 };
		float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
		int flash_number;

		flash_number = Defines.MZ2_TANK_MACHINEGUN_1 + (self.s.frame - M_Tank.FRAME_attak406);

		Math3D.AngleVectors(self.s.angles, forward, right, null);
		Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start);

		if (self.enemy != null)
		{
			Math3D.VectorCopy(self.enemy.s.origin, vec);
			vec[2] += self.enemy.viewheight;
			Math3D.VectorSubtract(vec, start, vec);
			Math3D.vectoangles(vec, vec);
			dir[0] = vec[0];
		}
		else
			dir[0] = 0;

		if (self.s.frame <= M_Tank.FRAME_attak415)
			dir[1] = self.s.angles[1] - 8 * (self.s.frame - M_Tank.FRAME_attak411);
		else
			dir[1] = self.s.angles[1] + 8 * (self.s.frame - M_Tank.FRAME_attak419);

		dir[2] = 0;

		Math3D.AngleVectors(dir, forward, null, null);

		Monster.monster_fire_bullet(self, start, forward, 20, 4, Defines.DEFAULT_BULLET_HSPREAD, Defines.DEFAULT_BULLET_VSPREAD, flash_number);

		return true;
	});

	private static readonly EntThinkAdapter tank_reattack_blaster = new("tank_reattack_blaster", self =>
	{
		if (GameBase.skill.value >= 2)
		{
			if (GameUtil.visible(self, self.enemy))
			{
				if (self.enemy.health > 0)
				{
					if (Lib.random() <= 0.6)
					{
						self.monsterinfo.currentmove = M_Tank.tank_move_reattack_blast;

						return true;
					}
				}
			}
		}

		self.monsterinfo.currentmove = M_Tank.tank_move_attack_post_blast;

		return true;
	});

	private static readonly mframe_t[] tank_frames_attack_blast =
	{
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, -1, null),
		new(GameAI.ai_charge, -2, null),
		new(GameAI.ai_charge, -1, null),
		new(GameAI.ai_charge, -1, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Tank.TankBlaster),

		// 10
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Tank.TankBlaster),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Tank.TankBlaster) // 16
	};

	private static readonly mmove_t tank_move_attack_blast =
		new(M_Tank.FRAME_attak101, M_Tank.FRAME_attak116, M_Tank.tank_frames_attack_blast, M_Tank.tank_reattack_blaster);

	private static readonly mframe_t[] tank_frames_reattack_blast =
	{
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Tank.TankBlaster),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Tank.TankBlaster) // 16)
	};

	private static readonly mmove_t tank_move_reattack_blast =
		new(M_Tank.FRAME_attak111, M_Tank.FRAME_attak116, M_Tank.tank_frames_reattack_blast, M_Tank.tank_reattack_blaster);

	private static readonly mframe_t[] tank_frames_attack_post_blast =
	{
		new(GameAI.ai_move, 0, null), // 17)
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, -2, M_Tank.tank_footstep) // 22
	};

	private static readonly mmove_t tank_move_attack_post_blast =
		new(M_Tank.FRAME_attak117, M_Tank.FRAME_attak122, M_Tank.tank_frames_attack_post_blast, M_Tank.tank_run);

	private static readonly EntThinkAdapter tank_poststrike = new("tank_poststrike", self =>
	{
		self.enemy = null;
		M_Tank.tank_run.think(self);

		return true;
	});

	private static readonly EntThinkAdapter tank_doattack_rocket = new("tank_doattack_rocket", self =>
	{
		self.monsterinfo.currentmove = M_Tank.tank_move_attack_fire_rocket;

		return true;
	});

	private static readonly EntThinkAdapter tank_refire_rocket = new("tank_refire_rocket", self =>
	{
		// Only on hard or nightmare
		if (GameBase.skill.value >= 2)
		{
			if (self.enemy.health > 0)
			{
				if (GameUtil.visible(self, self.enemy))
				{
					if (Lib.random() <= 0.4)
					{
						self.monsterinfo.currentmove = M_Tank.tank_move_attack_fire_rocket;

						return true;
					}
				}
			}
		}

		self.monsterinfo.currentmove = M_Tank.tank_move_attack_post_rocket;

		return true;
	});

	private static readonly mframe_t[] tank_frames_attack_strike =
	{
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 6, null),
		new(GameAI.ai_move, 7, null),
		new(GameAI.ai_move, 9, M_Tank.tank_footstep),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 2, M_Tank.tank_footstep),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, 0, M_Tank.tank_windup),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, M_Tank.TankStrike),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, -10, null),
		new(GameAI.ai_move, -10, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, -2, M_Tank.tank_footstep)
	};

	private static readonly mmove_t tank_move_attack_strike =
		new(M_Tank.FRAME_attak201, M_Tank.FRAME_attak238, M_Tank.tank_frames_attack_strike, M_Tank.tank_poststrike);

	private static readonly mframe_t[] tank_frames_attack_pre_rocket =
	{
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),

		// 10)

		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 1, null),
		new(GameAI.ai_charge, 2, null),
		new(GameAI.ai_charge, 7, null),
		new(GameAI.ai_charge, 7, null),
		new(GameAI.ai_charge, 7, M_Tank.tank_footstep),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),

		// 20)

		new(GameAI.ai_charge, -3, null)
	};

	private static readonly mmove_t tank_move_attack_pre_rocket =
		new(M_Tank.FRAME_attak301, M_Tank.FRAME_attak321, M_Tank.tank_frames_attack_pre_rocket, M_Tank.tank_doattack_rocket);

	private static readonly mframe_t[] tank_frames_attack_fire_rocket =
	{
		new(GameAI.ai_charge, -3, null), // Loop Start 22 )
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Tank.TankRocket), // 24)
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Tank.TankRocket),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, -1, M_Tank.TankRocket) // 30 Loop End
	};

	private static readonly mmove_t tank_move_attack_fire_rocket =
		new(M_Tank.FRAME_attak322, M_Tank.FRAME_attak330, M_Tank.tank_frames_attack_fire_rocket, M_Tank.tank_refire_rocket);

	private static readonly mframe_t[] tank_frames_attack_post_rocket =
	{
		new(GameAI.ai_charge, 0, null), // 31)
		new(GameAI.ai_charge, -1, null),
		new(GameAI.ai_charge, -1, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 2, null),
		new(GameAI.ai_charge, 3, null),
		new(GameAI.ai_charge, 4, null),
		new(GameAI.ai_charge, 2, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),

		// 40)

		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, -9, null),
		new(GameAI.ai_charge, -8, null),
		new(GameAI.ai_charge, -7, null),
		new(GameAI.ai_charge, -1, null),
		new(GameAI.ai_charge, -1, M_Tank.tank_footstep),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),

		// 50)

		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null)
	};

	private static readonly mmove_t tank_move_attack_post_rocket =
		new(M_Tank.FRAME_attak331, M_Tank.FRAME_attak353, M_Tank.tank_frames_attack_post_rocket, M_Tank.tank_run);

	private static readonly mframe_t[] tank_frames_attack_chain =
	{
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(null, 0, M_Tank.TankMachineGun),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null)
	};

	private static readonly mmove_t tank_move_attack_chain =
		new(M_Tank.FRAME_attak401, M_Tank.FRAME_attak429, M_Tank.tank_frames_attack_chain, M_Tank.tank_run);

	private static readonly EntThinkAdapter tank_attack = new("tank_attack", self =>
	{
		float[] vec = { 0, 0, 0 };
		float range;
		float r;

		if (self.enemy.health < 0)
		{
			self.monsterinfo.currentmove = M_Tank.tank_move_attack_strike;
			self.monsterinfo.aiflags &= ~Defines.AI_BRUTAL;

			return true;
		}

		Math3D.VectorSubtract(self.enemy.s.origin, self.s.origin, vec);
		range = Math3D.VectorLength(vec);

		r = Lib.random();

		if (range <= 125)
		{
			if (r < 0.4)
				self.monsterinfo.currentmove = M_Tank.tank_move_attack_chain;
			else
				self.monsterinfo.currentmove = M_Tank.tank_move_attack_blast;
		}
		else if (range <= 250)
		{
			if (r < 0.5)
				self.monsterinfo.currentmove = M_Tank.tank_move_attack_chain;
			else
				self.monsterinfo.currentmove = M_Tank.tank_move_attack_blast;
		}
		else
		{
			if (r < 0.33)
				self.monsterinfo.currentmove = M_Tank.tank_move_attack_chain;
			else if (r < 0.66)
			{
				self.monsterinfo.currentmove = M_Tank.tank_move_attack_pre_rocket;
				self.pain_debounce_time = GameBase.level.time + 5.0f; // no

				// pain
				// for
				// a
				// while
			}
			else
				self.monsterinfo.currentmove = M_Tank.tank_move_attack_blast;
		}

		return true;
	});

	//
	// death
	//
	private static readonly EntThinkAdapter tank_dead = new("tank_dead", self =>
	{
		Math3D.VectorSet(self.mins, -16, -16, -16);
		Math3D.VectorSet(self.maxs, 16, 16, -0);
		self.movetype = Defines.MOVETYPE_TOSS;
		self.svflags |= Defines.SVF_DEADMONSTER;
		self.nextthink = 0;
		GameBase.gi.linkentity(self);

		return true;
	});

	private static readonly mframe_t[] tank_frames_death1 =
	{
		new(GameAI.ai_move, -7, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 6, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -4, null),
		new(GameAI.ai_move, -6, null),
		new(GameAI.ai_move, -4, null),
		new(GameAI.ai_move, -5, null),
		new(GameAI.ai_move, -7, null),
		new(GameAI.ai_move, -15, M_Tank.tank_thud),
		new(GameAI.ai_move, -5, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t tank_move_death = new(M_Tank.FRAME_death101, M_Tank.FRAME_death132, M_Tank.tank_frames_death1, M_Tank.tank_dead);

	private static readonly EntDieAdapter tank_die = new("tank_die", (self, inflictor, attacker, damage, point) =>
	{
		int n;

		// check for gib
		if (self.health <= self.gib_health)
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_NORM, 0);

			for (n = 0; n < 1 /* 4 */; n++)
				GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC);

			for (n = 0; n < 4; n++)
				GameMisc.ThrowGib(self, "models/objects/gibs/sm_metal/tris.md2", damage, Defines.GIB_METALLIC);

			GameMisc.ThrowGib(self, "models/objects/gibs/chest/tris.md2", damage, Defines.GIB_ORGANIC);
			GameMisc.ThrowHead(self, "models/objects/gibs/gear/tris.md2", damage, Defines.GIB_METALLIC);
			self.deadflag = Defines.DEAD_DEAD;

			return;
		}

		if (self.deadflag == Defines.DEAD_DEAD)
			return;

		// regular death
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Tank.sound_die, 1, Defines.ATTN_NORM, 0);
		self.deadflag = Defines.DEAD_DEAD;
		self.takedamage = Defines.DAMAGE_YES;

		self.monsterinfo.currentmove = M_Tank.tank_move_death;
	});

	//
	// monster_tank
	//

	/*
	 * QUAKED monster_tank (1 .5 0) (-32 -32 -16) (32 32 72) Ambush
	 * Trigger_Spawn Sight
	 */
	/*
	 * QUAKED monster_tank_commander (1 .5 0) (-32 -32 -16) (32 32 72) Ambush
	 * Trigger_Spawn Sight
	 */
	public static EntThinkAdapter SP_monster_tank = new("SP_monster_tank", self =>
	{
		if (GameBase.deathmatch.value != 0)
		{
			GameUtil.G_FreeEdict(self);

			return true;
		}

		self.s.modelindex = GameBase.gi.modelindex("models/monsters/tank/tris.md2");
		Math3D.VectorSet(self.mins, -32, -32, -16);
		Math3D.VectorSet(self.maxs, 32, 32, 72);
		self.movetype = Defines.MOVETYPE_STEP;
		self.solid = Defines.SOLID_BBOX;

		M_Tank.sound_pain = GameBase.gi.soundindex("tank/tnkpain2.wav");
		M_Tank.sound_thud = GameBase.gi.soundindex("tank/tnkdeth2.wav");
		M_Tank.sound_idle = GameBase.gi.soundindex("tank/tnkidle1.wav");
		M_Tank.sound_die = GameBase.gi.soundindex("tank/death.wav");
		M_Tank.sound_step = GameBase.gi.soundindex("tank/step.wav");
		M_Tank.sound_windup = GameBase.gi.soundindex("tank/tnkatck4.wav");
		M_Tank.sound_strike = GameBase.gi.soundindex("tank/tnkatck5.wav");
		M_Tank.sound_sight = GameBase.gi.soundindex("tank/sight1.wav");

		GameBase.gi.soundindex("tank/tnkatck1.wav");
		GameBase.gi.soundindex("tank/tnkatk2a.wav");
		GameBase.gi.soundindex("tank/tnkatk2b.wav");
		GameBase.gi.soundindex("tank/tnkatk2c.wav");
		GameBase.gi.soundindex("tank/tnkatk2d.wav");
		GameBase.gi.soundindex("tank/tnkatk2e.wav");
		GameBase.gi.soundindex("tank/tnkatck3.wav");

		if (Lib.strcmp(self.classname, "monster_tank_commander") == 0)
		{
			self.health = 1000;
			self.gib_health = -225;
		}
		else
		{
			self.health = 750;
			self.gib_health = -200;
		}

		self.mass = 500;

		self.pain = M_Tank.tank_pain;
		self.die = M_Tank.tank_die;
		self.monsterinfo.stand = M_Tank.tank_stand;
		self.monsterinfo.walk = M_Tank.tank_walk;
		self.monsterinfo.run = M_Tank.tank_run;
		self.monsterinfo.dodge = null;
		self.monsterinfo.attack = M_Tank.tank_attack;
		self.monsterinfo.melee = null;
		self.monsterinfo.sight = M_Tank.tank_sight;
		self.monsterinfo.idle = M_Tank.tank_idle;

		GameBase.gi.linkentity(self);

		self.monsterinfo.currentmove = M_Tank.tank_move_stand;
		self.monsterinfo.scale = M_Tank.MODEL_SCALE;

		GameAI.walkmonster_start.think(self);

		if (Lib.strcmp(self.classname, "monster_tank_commander") == 0)
			self.s.skinnum = 2;

		return true;
	});
}