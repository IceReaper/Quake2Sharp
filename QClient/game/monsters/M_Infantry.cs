/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
namespace QClient.game.monsters;

using adapters;
using client;
using types;
using util;

public class M_Infantry
{
	//	This file generated by ModelGen - Do NOT Modify
	public static readonly int FRAME_gun02 = 0;
	public static readonly int FRAME_stand01 = 1;
	public static readonly int FRAME_stand02 = 2;
	public static readonly int FRAME_stand03 = 3;
	public static readonly int FRAME_stand04 = 4;
	public static readonly int FRAME_stand05 = 5;
	public static readonly int FRAME_stand06 = 6;
	public static readonly int FRAME_stand07 = 7;
	public static readonly int FRAME_stand08 = 8;
	public static readonly int FRAME_stand09 = 9;
	public static readonly int FRAME_stand10 = 10;
	public static readonly int FRAME_stand11 = 11;
	public static readonly int FRAME_stand12 = 12;
	public static readonly int FRAME_stand13 = 13;
	public static readonly int FRAME_stand14 = 14;
	public static readonly int FRAME_stand15 = 15;
	public static readonly int FRAME_stand16 = 16;
	public static readonly int FRAME_stand17 = 17;
	public static readonly int FRAME_stand18 = 18;
	public static readonly int FRAME_stand19 = 19;
	public static readonly int FRAME_stand20 = 20;
	public static readonly int FRAME_stand21 = 21;
	public static readonly int FRAME_stand22 = 22;
	public static readonly int FRAME_stand23 = 23;
	public static readonly int FRAME_stand24 = 24;
	public static readonly int FRAME_stand25 = 25;
	public static readonly int FRAME_stand26 = 26;
	public static readonly int FRAME_stand27 = 27;
	public static readonly int FRAME_stand28 = 28;
	public static readonly int FRAME_stand29 = 29;
	public static readonly int FRAME_stand30 = 30;
	public static readonly int FRAME_stand31 = 31;
	public static readonly int FRAME_stand32 = 32;
	public static readonly int FRAME_stand33 = 33;
	public static readonly int FRAME_stand34 = 34;
	public static readonly int FRAME_stand35 = 35;
	public static readonly int FRAME_stand36 = 36;
	public static readonly int FRAME_stand37 = 37;
	public static readonly int FRAME_stand38 = 38;
	public static readonly int FRAME_stand39 = 39;
	public static readonly int FRAME_stand40 = 40;
	public static readonly int FRAME_stand41 = 41;
	public static readonly int FRAME_stand42 = 42;
	public static readonly int FRAME_stand43 = 43;
	public static readonly int FRAME_stand44 = 44;
	public static readonly int FRAME_stand45 = 45;
	public static readonly int FRAME_stand46 = 46;
	public static readonly int FRAME_stand47 = 47;
	public static readonly int FRAME_stand48 = 48;
	public static readonly int FRAME_stand49 = 49;
	public static readonly int FRAME_stand50 = 50;
	public static readonly int FRAME_stand51 = 51;
	public static readonly int FRAME_stand52 = 52;
	public static readonly int FRAME_stand53 = 53;
	public static readonly int FRAME_stand54 = 54;
	public static readonly int FRAME_stand55 = 55;
	public static readonly int FRAME_stand56 = 56;
	public static readonly int FRAME_stand57 = 57;
	public static readonly int FRAME_stand58 = 58;
	public static readonly int FRAME_stand59 = 59;
	public static readonly int FRAME_stand60 = 60;
	public static readonly int FRAME_stand61 = 61;
	public static readonly int FRAME_stand62 = 62;
	public static readonly int FRAME_stand63 = 63;
	public static readonly int FRAME_stand64 = 64;
	public static readonly int FRAME_stand65 = 65;
	public static readonly int FRAME_stand66 = 66;
	public static readonly int FRAME_stand67 = 67;
	public static readonly int FRAME_stand68 = 68;
	public static readonly int FRAME_stand69 = 69;
	public static readonly int FRAME_stand70 = 70;
	public static readonly int FRAME_stand71 = 71;
	public static readonly int FRAME_walk01 = 72;
	public static readonly int FRAME_walk02 = 73;
	public static readonly int FRAME_walk03 = 74;
	public static readonly int FRAME_walk04 = 75;
	public static readonly int FRAME_walk05 = 76;
	public static readonly int FRAME_walk06 = 77;
	public static readonly int FRAME_walk07 = 78;
	public static readonly int FRAME_walk08 = 79;
	public static readonly int FRAME_walk09 = 80;
	public static readonly int FRAME_walk10 = 81;
	public static readonly int FRAME_walk11 = 82;
	public static readonly int FRAME_walk12 = 83;
	public static readonly int FRAME_walk13 = 84;
	public static readonly int FRAME_walk14 = 85;
	public static readonly int FRAME_walk15 = 86;
	public static readonly int FRAME_walk16 = 87;
	public static readonly int FRAME_walk17 = 88;
	public static readonly int FRAME_walk18 = 89;
	public static readonly int FRAME_walk19 = 90;
	public static readonly int FRAME_walk20 = 91;
	public static readonly int FRAME_run01 = 92;
	public static readonly int FRAME_run02 = 93;
	public static readonly int FRAME_run03 = 94;
	public static readonly int FRAME_run04 = 95;
	public static readonly int FRAME_run05 = 96;
	public static readonly int FRAME_run06 = 97;
	public static readonly int FRAME_run07 = 98;
	public static readonly int FRAME_run08 = 99;
	public static readonly int FRAME_pain101 = 100;
	public static readonly int FRAME_pain102 = 101;
	public static readonly int FRAME_pain103 = 102;
	public static readonly int FRAME_pain104 = 103;
	public static readonly int FRAME_pain105 = 104;
	public static readonly int FRAME_pain106 = 105;
	public static readonly int FRAME_pain107 = 106;
	public static readonly int FRAME_pain108 = 107;
	public static readonly int FRAME_pain109 = 108;
	public static readonly int FRAME_pain110 = 109;
	public static readonly int FRAME_pain201 = 110;
	public static readonly int FRAME_pain202 = 111;
	public static readonly int FRAME_pain203 = 112;
	public static readonly int FRAME_pain204 = 113;
	public static readonly int FRAME_pain205 = 114;
	public static readonly int FRAME_pain206 = 115;
	public static readonly int FRAME_pain207 = 116;
	public static readonly int FRAME_pain208 = 117;
	public static readonly int FRAME_pain209 = 118;
	public static readonly int FRAME_pain210 = 119;
	public static readonly int FRAME_duck01 = 120;
	public static readonly int FRAME_duck02 = 121;
	public static readonly int FRAME_duck03 = 122;
	public static readonly int FRAME_duck04 = 123;
	public static readonly int FRAME_duck05 = 124;
	public static readonly int FRAME_death101 = 125;
	public static readonly int FRAME_death102 = 126;
	public static readonly int FRAME_death103 = 127;
	public static readonly int FRAME_death104 = 128;
	public static readonly int FRAME_death105 = 129;
	public static readonly int FRAME_death106 = 130;
	public static readonly int FRAME_death107 = 131;
	public static readonly int FRAME_death108 = 132;
	public static readonly int FRAME_death109 = 133;
	public static readonly int FRAME_death110 = 134;
	public static readonly int FRAME_death111 = 135;
	public static readonly int FRAME_death112 = 136;
	public static readonly int FRAME_death113 = 137;
	public static readonly int FRAME_death114 = 138;
	public static readonly int FRAME_death115 = 139;
	public static readonly int FRAME_death116 = 140;
	public static readonly int FRAME_death117 = 141;
	public static readonly int FRAME_death118 = 142;
	public static readonly int FRAME_death119 = 143;
	public static readonly int FRAME_death120 = 144;
	public static readonly int FRAME_death201 = 145;
	public static readonly int FRAME_death202 = 146;
	public static readonly int FRAME_death203 = 147;
	public static readonly int FRAME_death204 = 148;
	public static readonly int FRAME_death205 = 149;
	public static readonly int FRAME_death206 = 150;
	public static readonly int FRAME_death207 = 151;
	public static readonly int FRAME_death208 = 152;
	public static readonly int FRAME_death209 = 153;
	public static readonly int FRAME_death210 = 154;
	public static readonly int FRAME_death211 = 155;
	public static readonly int FRAME_death212 = 156;
	public static readonly int FRAME_death213 = 157;
	public static readonly int FRAME_death214 = 158;
	public static readonly int FRAME_death215 = 159;
	public static readonly int FRAME_death216 = 160;
	public static readonly int FRAME_death217 = 161;
	public static readonly int FRAME_death218 = 162;
	public static readonly int FRAME_death219 = 163;
	public static readonly int FRAME_death220 = 164;
	public static readonly int FRAME_death221 = 165;
	public static readonly int FRAME_death222 = 166;
	public static readonly int FRAME_death223 = 167;
	public static readonly int FRAME_death224 = 168;
	public static readonly int FRAME_death225 = 169;
	public static readonly int FRAME_death301 = 170;
	public static readonly int FRAME_death302 = 171;
	public static readonly int FRAME_death303 = 172;
	public static readonly int FRAME_death304 = 173;
	public static readonly int FRAME_death305 = 174;
	public static readonly int FRAME_death306 = 175;
	public static readonly int FRAME_death307 = 176;
	public static readonly int FRAME_death308 = 177;
	public static readonly int FRAME_death309 = 178;
	public static readonly int FRAME_block01 = 179;
	public static readonly int FRAME_block02 = 180;
	public static readonly int FRAME_block03 = 181;
	public static readonly int FRAME_block04 = 182;
	public static readonly int FRAME_block05 = 183;
	public static readonly int FRAME_attak101 = 184;
	public static readonly int FRAME_attak102 = 185;
	public static readonly int FRAME_attak103 = 186;
	public static readonly int FRAME_attak104 = 187;
	public static readonly int FRAME_attak105 = 188;
	public static readonly int FRAME_attak106 = 189;
	public static readonly int FRAME_attak107 = 190;
	public static readonly int FRAME_attak108 = 191;
	public static readonly int FRAME_attak109 = 192;
	public static readonly int FRAME_attak110 = 193;
	public static readonly int FRAME_attak111 = 194;
	public static readonly int FRAME_attak112 = 195;
	public static readonly int FRAME_attak113 = 196;
	public static readonly int FRAME_attak114 = 197;
	public static readonly int FRAME_attak115 = 198;
	public static readonly int FRAME_attak201 = 199;
	public static readonly int FRAME_attak202 = 200;
	public static readonly int FRAME_attak203 = 201;
	public static readonly int FRAME_attak204 = 202;
	public static readonly int FRAME_attak205 = 203;
	public static readonly int FRAME_attak206 = 204;
	public static readonly int FRAME_attak207 = 205;
	public static readonly int FRAME_attak208 = 206;
	public static readonly float MODEL_SCALE = 1.000000f;
	private static int sound_pain1;
	private static int sound_pain2;
	private static int sound_die1;
	private static int sound_die2;
	private static int sound_gunshot;
	private static int sound_weapon_cock;
	private static int sound_punch_swing;
	private static int sound_punch_hit;
	private static int sound_sight;
	private static int sound_search;
	private static int sound_idle;

	private static readonly mframe_t[] infantry_frames_stand =
	{
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null)
	};

	private static readonly mmove_t infantry_move_stand = new(M_Infantry.FRAME_stand50, M_Infantry.FRAME_stand71, M_Infantry.infantry_frames_stand, null);

	public static EntThinkAdapter infantry_stand = new("infantry_stand", self =>
	{
		self.monsterinfo.currentmove = M_Infantry.infantry_move_stand;

		return true;
	});

	private static readonly mframe_t[] infantry_frames_fidget =
	{
		new(GameAI.ai_stand, 1, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 1, null),
		new(GameAI.ai_stand, 3, null),
		new(GameAI.ai_stand, 6, null),
		new(GameAI.ai_stand, 3, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 1, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 1, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, -1, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 1, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, -2, null),
		new(GameAI.ai_stand, 1, null),
		new(GameAI.ai_stand, 1, null),
		new(GameAI.ai_stand, 1, null),
		new(GameAI.ai_stand, -1, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, -1, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, -1, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 1, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, -1, null),
		new(GameAI.ai_stand, -1, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, -3, null),
		new(GameAI.ai_stand, -2, null),
		new(GameAI.ai_stand, -3, null),
		new(GameAI.ai_stand, -3, null),
		new(GameAI.ai_stand, -2, null)
	};

	private static readonly mmove_t infantry_move_fidget =
		new(M_Infantry.FRAME_stand01, M_Infantry.FRAME_stand49, M_Infantry.infantry_frames_fidget, M_Infantry.infantry_stand);

	private static readonly EntThinkAdapter infantry_fidget = new("infantry_fidget", self =>
	{
		self.monsterinfo.currentmove = M_Infantry.infantry_move_fidget;
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Infantry.sound_idle, 1, Defines.ATTN_IDLE, 0);

		return true;
	});

	private static readonly mframe_t[] infantry_frames_walk =
	{
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 6, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 5, null)
	};

	private static readonly mmove_t infantry_move_walk = new(M_Infantry.FRAME_walk03, M_Infantry.FRAME_walk14, M_Infantry.infantry_frames_walk, null);

	private static readonly EntThinkAdapter infantry_walk = new("infantry_walk", self =>
	{
		self.monsterinfo.currentmove = M_Infantry.infantry_move_walk;

		return true;
	});

	private static readonly mframe_t[] infantry_frames_run =
	{
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 20, null),
		new(GameAI.ai_run, 5, null),
		new(GameAI.ai_run, 7, null),
		new(GameAI.ai_run, 30, null),
		new(GameAI.ai_run, 35, null),
		new(GameAI.ai_run, 2, null),
		new(GameAI.ai_run, 6, null)
	};

	private static readonly mmove_t infantry_move_run = new(M_Infantry.FRAME_run01, M_Infantry.FRAME_run08, M_Infantry.infantry_frames_run, null);

	private static readonly EntThinkAdapter infantry_run = new("infantry_run", self =>
	{
		if ((self.monsterinfo.aiflags & Defines.AI_STAND_GROUND) != 0)
			self.monsterinfo.currentmove = M_Infantry.infantry_move_stand;
		else
			self.monsterinfo.currentmove = M_Infantry.infantry_move_run;

		return true;
	});

	private static readonly mframe_t[] infantry_frames_pain1 =
	{
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 6, null),
		new(GameAI.ai_move, 2, null)
	};

	private static readonly mmove_t infantry_move_pain1 =
		new(M_Infantry.FRAME_pain101, M_Infantry.FRAME_pain110, M_Infantry.infantry_frames_pain1, M_Infantry.infantry_run);

	private static readonly mframe_t[] infantry_frames_pain2 =
	{
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 5, null),
		new(GameAI.ai_move, 2, null)
	};

	private static readonly mmove_t infantry_move_pain2 =
		new(M_Infantry.FRAME_pain201, M_Infantry.FRAME_pain210, M_Infantry.infantry_frames_pain2, M_Infantry.infantry_run);

	private static readonly EntPainAdapter infantry_pain = new("infantry_pain", (self, other, kick, damage) =>
	{
		int n;

		if (self.health < self.max_health / 2)
			self.s.skinnum = 1;

		if (GameBase.level.time < self.pain_debounce_time)
			return;

		self.pain_debounce_time = GameBase.level.time + 3;

		if (GameBase.skill.value == 3)
			return; // no pain anims in nightmare

		n = Lib.rand() % 2;

		if (n == 0)
		{
			self.monsterinfo.currentmove = M_Infantry.infantry_move_pain1;
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Infantry.sound_pain1, 1, Defines.ATTN_NORM, 0);
		}
		else
		{
			self.monsterinfo.currentmove = M_Infantry.infantry_move_pain2;
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Infantry.sound_pain2, 1, Defines.ATTN_NORM, 0);
		}
	});

	private static readonly float[][] aimangles =
	{
		new[] { 0.0f, 5.0f, 0.0f },
		new[] { 10.0f, 15.0f, 0.0f },
		new[] { 20.0f, 25.0f, 0.0f },
		new[] { 25.0f, 35.0f, 0.0f },
		new[] { 30.0f, 40.0f, 0.0f },
		new[] { 30.0f, 45.0f, 0.0f },
		new[] { 25.0f, 50.0f, 0.0f },
		new[] { 20.0f, 40.0f, 0.0f },
		new[] { 15.0f, 35.0f, 0.0f },
		new[] { 40.0f, 35.0f, 0.0f },
		new[] { 70.0f, 35.0f, 0.0f },
		new[] { 90.0f, 35.0f, 0.0f }
	};

	private static readonly EntThinkAdapter InfantryMachineGun = new("InfantryMachineGun", self =>
	{
		float[] start = { 0, 0, 0 }, target = { 0, 0, 0 };
		float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
		float[] vec = { 0, 0, 0 };
		int flash_number;

		if (self.s.frame == M_Infantry.FRAME_attak111)
		{
			flash_number = Defines.MZ2_INFANTRY_MACHINEGUN_1;
			Math3D.AngleVectors(self.s.angles, forward, right, null);
			Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start);

			if (self.enemy != null)
			{
				Math3D.VectorMA(self.enemy.s.origin, -0.2f, self.enemy.velocity, target);
				target[2] += self.enemy.viewheight;
				Math3D.VectorSubtract(target, start, forward);
				Math3D.VectorNormalize(forward);
			}
			else
				Math3D.AngleVectors(self.s.angles, forward, right, null);
		}
		else
		{
			flash_number = Defines.MZ2_INFANTRY_MACHINEGUN_2 + (self.s.frame - M_Infantry.FRAME_death211);

			Math3D.AngleVectors(self.s.angles, forward, right, null);
			Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start);

			Math3D.VectorSubtract(self.s.angles, M_Infantry.aimangles[flash_number - Defines.MZ2_INFANTRY_MACHINEGUN_2], vec);
			Math3D.AngleVectors(vec, forward, null, null);
		}

		Monster.monster_fire_bullet(self, start, forward, 3, 4, Defines.DEFAULT_BULLET_HSPREAD, Defines.DEFAULT_BULLET_VSPREAD, flash_number);

		return true;
	});

	private static readonly EntInteractAdapter infantry_sight = new("infantry_sight", (self, other) =>
	{
		GameBase.gi.sound(self, Defines.CHAN_BODY, M_Infantry.sound_sight, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	///
	private static readonly EntThinkAdapter infantry_dead = new("infantry_dead", self =>
	{
		Math3D.VectorSet(self.mins, -16, -16, -24);
		Math3D.VectorSet(self.maxs, 16, 16, -8);
		self.movetype = Defines.MOVETYPE_TOSS;
		self.svflags |= Defines.SVF_DEADMONSTER;
		GameBase.gi.linkentity(self);

		M.M_FlyCheck.think(self);

		return true;
	});

	private static readonly mframe_t[] infantry_frames_death1 =
	{
		new(GameAI.ai_move, -4, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -4, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 9, null),
		new(GameAI.ai_move, 9, null),
		new(GameAI.ai_move, 5, null),
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, -3, null)
	};

	private static readonly mmove_t infantry_move_death1 =
		new(M_Infantry.FRAME_death101, M_Infantry.FRAME_death120, M_Infantry.infantry_frames_death1, M_Infantry.infantry_dead);

	//	Off with his head
	private static readonly mframe_t[] infantry_frames_death2 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 5, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 4, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -2, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, -2, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, -3, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, -1, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, -2, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, 0, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, 2, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, 2, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, 3, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, -10, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, -7, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, -8, M_Infantry.InfantryMachineGun),
		new(GameAI.ai_move, -6, null),
		new(GameAI.ai_move, 4, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t infantry_move_death2 =
		new(M_Infantry.FRAME_death201, M_Infantry.FRAME_death225, M_Infantry.infantry_frames_death2, M_Infantry.infantry_dead);

	private static readonly mframe_t[] infantry_frames_death3 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -6, null),
		new(GameAI.ai_move, -11, null),
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, -11, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t infantry_move_death3 =
		new(M_Infantry.FRAME_death301, M_Infantry.FRAME_death309, M_Infantry.infantry_frames_death3, M_Infantry.infantry_dead);

	public static EntDieAdapter infantry_die = new("infantry_die", (self, inflictor, attacker, damage, point) =>
	{
		int n;

		//	check for gib
		if (self.health <= self.gib_health)
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_NORM, 0);

			for (n = 0; n < 2; n++)
				GameMisc.ThrowGib(self, "models/objects/gibs/bone/tris.md2", damage, Defines.GIB_ORGANIC);

			for (n = 0; n < 4; n++)
				GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC);

			GameMisc.ThrowHead(self, "models/objects/gibs/head2/tris.md2", damage, Defines.GIB_ORGANIC);
			self.deadflag = Defines.DEAD_DEAD;

			return;
		}

		if (self.deadflag == Defines.DEAD_DEAD)
			return;

		//	regular death
		self.deadflag = Defines.DEAD_DEAD;
		self.takedamage = Defines.DAMAGE_YES;

		n = Lib.rand() % 3;

		if (n == 0)
		{
			self.monsterinfo.currentmove = M_Infantry.infantry_move_death1;
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Infantry.sound_die2, 1, Defines.ATTN_NORM, 0);
		}
		else if (n == 1)
		{
			self.monsterinfo.currentmove = M_Infantry.infantry_move_death2;
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Infantry.sound_die1, 1, Defines.ATTN_NORM, 0);
		}
		else
		{
			self.monsterinfo.currentmove = M_Infantry.infantry_move_death3;
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Infantry.sound_die2, 1, Defines.ATTN_NORM, 0);
		}
	});

	private static readonly EntThinkAdapter infantry_duck_down = new("infantry_duck_down", self =>
	{
		if ((self.monsterinfo.aiflags & Defines.AI_DUCKED) != 0)
			return true;

		self.monsterinfo.aiflags |= Defines.AI_DUCKED;
		self.maxs[2] -= 32;
		self.takedamage = Defines.DAMAGE_YES;
		self.monsterinfo.pausetime = GameBase.level.time + 1;
		GameBase.gi.linkentity(self);

		return true;
	});

	private static readonly EntThinkAdapter infantry_duck_hold = new("infantry_duck_hold", self =>
	{
		if (GameBase.level.time >= self.monsterinfo.pausetime)
			self.monsterinfo.aiflags &= ~Defines.AI_HOLD_FRAME;
		else
			self.monsterinfo.aiflags |= Defines.AI_HOLD_FRAME;

		return true;
	});

	private static readonly EntThinkAdapter infantry_duck_up = new("infantry_duck_up", self =>
	{
		self.monsterinfo.aiflags &= ~Defines.AI_DUCKED;
		self.maxs[2] += 32;
		self.takedamage = Defines.DAMAGE_AIM;
		GameBase.gi.linkentity(self);

		return true;
	});

	private static readonly mframe_t[] infantry_frames_duck =
	{
		new(GameAI.ai_move, -2, M_Infantry.infantry_duck_down),
		new(GameAI.ai_move, -5, M_Infantry.infantry_duck_hold),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 4, M_Infantry.infantry_duck_up),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t infantry_move_duck =
		new(M_Infantry.FRAME_duck01, M_Infantry.FRAME_duck05, M_Infantry.infantry_frames_duck, M_Infantry.infantry_run);

	private static readonly EntDodgeAdapter infantry_dodge = new("infantry_dodge", (self, attacker, eta) =>
	{
		if (Lib.random() > 0.25)
			return;

		if (null == self.enemy)
			self.enemy = attacker;

		self.monsterinfo.currentmove = M_Infantry.infantry_move_duck;
	});

	private static readonly EntThinkAdapter infantry_cock_gun = new("infantry_cock_gun", self =>
	{
		int n;

		GameBase.gi.sound(self, Defines.CHAN_WEAPON, M_Infantry.sound_weapon_cock, 1, Defines.ATTN_NORM, 0);
		n = (Lib.rand() & 15) + 3 + 7;
		self.monsterinfo.pausetime = GameBase.level.time + n * Defines.FRAMETIME;

		return true;
	});

	private static readonly EntThinkAdapter infantry_fire = new("infantry_fire", self =>
	{
		M_Infantry.InfantryMachineGun.think(self);

		if (GameBase.level.time >= self.monsterinfo.pausetime)
			self.monsterinfo.aiflags &= ~Defines.AI_HOLD_FRAME;
		else
			self.monsterinfo.aiflags |= Defines.AI_HOLD_FRAME;

		return true;
	});

	private static readonly mframe_t[] infantry_frames_attack1 =
	{
		new(GameAI.ai_charge, 4, null),
		new(GameAI.ai_charge, -1, null),
		new(GameAI.ai_charge, -1, null),
		new(GameAI.ai_charge, 0, M_Infantry.infantry_cock_gun),
		new(GameAI.ai_charge, -1, null),
		new(GameAI.ai_charge, 1, null),
		new(GameAI.ai_charge, 1, null),
		new(GameAI.ai_charge, 2, null),
		new(GameAI.ai_charge, -2, null),
		new(GameAI.ai_charge, -3, null),
		new(GameAI.ai_charge, 1, M_Infantry.infantry_fire),
		new(GameAI.ai_charge, 5, null),
		new(GameAI.ai_charge, -1, null),
		new(GameAI.ai_charge, -2, null),
		new(GameAI.ai_charge, -3, null)
	};

	private static readonly mmove_t infantry_move_attack1 =
		new(M_Infantry.FRAME_attak101, M_Infantry.FRAME_attak115, M_Infantry.infantry_frames_attack1, M_Infantry.infantry_run);

	private static readonly EntThinkAdapter infantry_swing = new("infantry_swing", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_WEAPON, M_Infantry.sound_punch_swing, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter infantry_smack = new("infantry_smack", self =>
	{
		float[] aim = { 0, 0, 0 };

		Math3D.VectorSet(aim, Defines.MELEE_DISTANCE, 0, 0);

		if (GameWeapon.fire_hit(self, aim, 5 + Lib.rand() % 5, 50))
			GameBase.gi.sound(self, Defines.CHAN_WEAPON, M_Infantry.sound_punch_hit, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly mframe_t[] infantry_frames_attack2 =
	{
		new(GameAI.ai_charge, 3, null),
		new(GameAI.ai_charge, 6, null),
		new(GameAI.ai_charge, 0, M_Infantry.infantry_swing),
		new(GameAI.ai_charge, 8, null),
		new(GameAI.ai_charge, 5, null),
		new(GameAI.ai_charge, 8, M_Infantry.infantry_smack),
		new(GameAI.ai_charge, 6, null),
		new(GameAI.ai_charge, 3, null)
	};

	private static readonly mmove_t infantry_move_attack2 =
		new(M_Infantry.FRAME_attak201, M_Infantry.FRAME_attak208, M_Infantry.infantry_frames_attack2, M_Infantry.infantry_run);

	private static readonly EntThinkAdapter infantry_attack = new("infantry_attack", self =>
	{
		if (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE)
			self.monsterinfo.currentmove = M_Infantry.infantry_move_attack2;
		else
			self.monsterinfo.currentmove = M_Infantry.infantry_move_attack1;

		return true;
	});

	/*
	 * QUAKED monster_infantry (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
	 * Trigger_Spawn Sight
	 */
	public static void SP_monster_infantry(edict_t self)
	{
		if (GameBase.deathmatch.value != 0)
		{
			GameUtil.G_FreeEdict(self);

			return;
		}

		M_Infantry.sound_pain1 = GameBase.gi.soundindex("infantry/infpain1.wav");
		M_Infantry.sound_pain2 = GameBase.gi.soundindex("infantry/infpain2.wav");
		M_Infantry.sound_die1 = GameBase.gi.soundindex("infantry/infdeth1.wav");
		M_Infantry.sound_die2 = GameBase.gi.soundindex("infantry/infdeth2.wav");

		M_Infantry.sound_gunshot = GameBase.gi.soundindex("infantry/infatck1.wav");
		M_Infantry.sound_weapon_cock = GameBase.gi.soundindex("infantry/infatck3.wav");
		M_Infantry.sound_punch_swing = GameBase.gi.soundindex("infantry/infatck2.wav");
		M_Infantry.sound_punch_hit = GameBase.gi.soundindex("infantry/melee2.wav");

		M_Infantry.sound_sight = GameBase.gi.soundindex("infantry/infsght1.wav");
		M_Infantry.sound_search = GameBase.gi.soundindex("infantry/infsrch1.wav");
		M_Infantry.sound_idle = GameBase.gi.soundindex("infantry/infidle1.wav");

		self.movetype = Defines.MOVETYPE_STEP;
		self.solid = Defines.SOLID_BBOX;
		self.s.modelindex = GameBase.gi.modelindex("models/monsters/infantry/tris.md2");
		Math3D.VectorSet(self.mins, -16, -16, -24);
		Math3D.VectorSet(self.maxs, 16, 16, 32);

		self.health = 100;
		self.gib_health = -40;
		self.mass = 200;

		self.pain = M_Infantry.infantry_pain;
		self.die = M_Infantry.infantry_die;

		self.monsterinfo.stand = M_Infantry.infantry_stand;
		self.monsterinfo.walk = M_Infantry.infantry_walk;
		self.monsterinfo.run = M_Infantry.infantry_run;
		self.monsterinfo.dodge = M_Infantry.infantry_dodge;
		self.monsterinfo.attack = M_Infantry.infantry_attack;
		self.monsterinfo.melee = null;
		self.monsterinfo.sight = M_Infantry.infantry_sight;
		self.monsterinfo.idle = M_Infantry.infantry_fidget;

		GameBase.gi.linkentity(self);

		self.monsterinfo.currentmove = M_Infantry.infantry_move_stand;
		self.monsterinfo.scale = M_Infantry.MODEL_SCALE;

		GameAI.walkmonster_start.think(self);
	}
}