/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
namespace QClient.game.monsters;

using adapters;
using types;
using util;

public class M_Gunner
{
	//	This file generated by ModelGen - Do NOT Modify
	public static readonly int FRAME_stand01 = 0;
	public static readonly int FRAME_stand02 = 1;
	public static readonly int FRAME_stand03 = 2;
	public static readonly int FRAME_stand04 = 3;
	public static readonly int FRAME_stand05 = 4;
	public static readonly int FRAME_stand06 = 5;
	public static readonly int FRAME_stand07 = 6;
	public static readonly int FRAME_stand08 = 7;
	public static readonly int FRAME_stand09 = 8;
	public static readonly int FRAME_stand10 = 9;
	public static readonly int FRAME_stand11 = 10;
	public static readonly int FRAME_stand12 = 11;
	public static readonly int FRAME_stand13 = 12;
	public static readonly int FRAME_stand14 = 13;
	public static readonly int FRAME_stand15 = 14;
	public static readonly int FRAME_stand16 = 15;
	public static readonly int FRAME_stand17 = 16;
	public static readonly int FRAME_stand18 = 17;
	public static readonly int FRAME_stand19 = 18;
	public static readonly int FRAME_stand20 = 19;
	public static readonly int FRAME_stand21 = 20;
	public static readonly int FRAME_stand22 = 21;
	public static readonly int FRAME_stand23 = 22;
	public static readonly int FRAME_stand24 = 23;
	public static readonly int FRAME_stand25 = 24;
	public static readonly int FRAME_stand26 = 25;
	public static readonly int FRAME_stand27 = 26;
	public static readonly int FRAME_stand28 = 27;
	public static readonly int FRAME_stand29 = 28;
	public static readonly int FRAME_stand30 = 29;
	public static readonly int FRAME_stand31 = 30;
	public static readonly int FRAME_stand32 = 31;
	public static readonly int FRAME_stand33 = 32;
	public static readonly int FRAME_stand34 = 33;
	public static readonly int FRAME_stand35 = 34;
	public static readonly int FRAME_stand36 = 35;
	public static readonly int FRAME_stand37 = 36;
	public static readonly int FRAME_stand38 = 37;
	public static readonly int FRAME_stand39 = 38;
	public static readonly int FRAME_stand40 = 39;
	public static readonly int FRAME_stand41 = 40;
	public static readonly int FRAME_stand42 = 41;
	public static readonly int FRAME_stand43 = 42;
	public static readonly int FRAME_stand44 = 43;
	public static readonly int FRAME_stand45 = 44;
	public static readonly int FRAME_stand46 = 45;
	public static readonly int FRAME_stand47 = 46;
	public static readonly int FRAME_stand48 = 47;
	public static readonly int FRAME_stand49 = 48;
	public static readonly int FRAME_stand50 = 49;
	public static readonly int FRAME_stand51 = 50;
	public static readonly int FRAME_stand52 = 51;
	public static readonly int FRAME_stand53 = 52;
	public static readonly int FRAME_stand54 = 53;
	public static readonly int FRAME_stand55 = 54;
	public static readonly int FRAME_stand56 = 55;
	public static readonly int FRAME_stand57 = 56;
	public static readonly int FRAME_stand58 = 57;
	public static readonly int FRAME_stand59 = 58;
	public static readonly int FRAME_stand60 = 59;
	public static readonly int FRAME_stand61 = 60;
	public static readonly int FRAME_stand62 = 61;
	public static readonly int FRAME_stand63 = 62;
	public static readonly int FRAME_stand64 = 63;
	public static readonly int FRAME_stand65 = 64;
	public static readonly int FRAME_stand66 = 65;
	public static readonly int FRAME_stand67 = 66;
	public static readonly int FRAME_stand68 = 67;
	public static readonly int FRAME_stand69 = 68;
	public static readonly int FRAME_stand70 = 69;
	public static readonly int FRAME_walk01 = 70;
	public static readonly int FRAME_walk02 = 71;
	public static readonly int FRAME_walk03 = 72;
	public static readonly int FRAME_walk04 = 73;
	public static readonly int FRAME_walk05 = 74;
	public static readonly int FRAME_walk06 = 75;
	public static readonly int FRAME_walk07 = 76;
	public static readonly int FRAME_walk08 = 77;
	public static readonly int FRAME_walk09 = 78;
	public static readonly int FRAME_walk10 = 79;
	public static readonly int FRAME_walk11 = 80;
	public static readonly int FRAME_walk12 = 81;
	public static readonly int FRAME_walk13 = 82;
	public static readonly int FRAME_walk14 = 83;
	public static readonly int FRAME_walk15 = 84;
	public static readonly int FRAME_walk16 = 85;
	public static readonly int FRAME_walk17 = 86;
	public static readonly int FRAME_walk18 = 87;
	public static readonly int FRAME_walk19 = 88;
	public static readonly int FRAME_walk20 = 89;
	public static readonly int FRAME_walk21 = 90;
	public static readonly int FRAME_walk22 = 91;
	public static readonly int FRAME_walk23 = 92;
	public static readonly int FRAME_walk24 = 93;
	public static readonly int FRAME_run01 = 94;
	public static readonly int FRAME_run02 = 95;
	public static readonly int FRAME_run03 = 96;
	public static readonly int FRAME_run04 = 97;
	public static readonly int FRAME_run05 = 98;
	public static readonly int FRAME_run06 = 99;
	public static readonly int FRAME_run07 = 100;
	public static readonly int FRAME_run08 = 101;
	public static readonly int FRAME_runs01 = 102;
	public static readonly int FRAME_runs02 = 103;
	public static readonly int FRAME_runs03 = 104;
	public static readonly int FRAME_runs04 = 105;
	public static readonly int FRAME_runs05 = 106;
	public static readonly int FRAME_runs06 = 107;
	public static readonly int FRAME_attak101 = 108;
	public static readonly int FRAME_attak102 = 109;
	public static readonly int FRAME_attak103 = 110;
	public static readonly int FRAME_attak104 = 111;
	public static readonly int FRAME_attak105 = 112;
	public static readonly int FRAME_attak106 = 113;
	public static readonly int FRAME_attak107 = 114;
	public static readonly int FRAME_attak108 = 115;
	public static readonly int FRAME_attak109 = 116;
	public static readonly int FRAME_attak110 = 117;
	public static readonly int FRAME_attak111 = 118;
	public static readonly int FRAME_attak112 = 119;
	public static readonly int FRAME_attak113 = 120;
	public static readonly int FRAME_attak114 = 121;
	public static readonly int FRAME_attak115 = 122;
	public static readonly int FRAME_attak116 = 123;
	public static readonly int FRAME_attak117 = 124;
	public static readonly int FRAME_attak118 = 125;
	public static readonly int FRAME_attak119 = 126;
	public static readonly int FRAME_attak120 = 127;
	public static readonly int FRAME_attak121 = 128;
	public static readonly int FRAME_attak201 = 129;
	public static readonly int FRAME_attak202 = 130;
	public static readonly int FRAME_attak203 = 131;
	public static readonly int FRAME_attak204 = 132;
	public static readonly int FRAME_attak205 = 133;
	public static readonly int FRAME_attak206 = 134;
	public static readonly int FRAME_attak207 = 135;
	public static readonly int FRAME_attak208 = 136;
	public static readonly int FRAME_attak209 = 137;
	public static readonly int FRAME_attak210 = 138;
	public static readonly int FRAME_attak211 = 139;
	public static readonly int FRAME_attak212 = 140;
	public static readonly int FRAME_attak213 = 141;
	public static readonly int FRAME_attak214 = 142;
	public static readonly int FRAME_attak215 = 143;
	public static readonly int FRAME_attak216 = 144;
	public static readonly int FRAME_attak217 = 145;
	public static readonly int FRAME_attak218 = 146;
	public static readonly int FRAME_attak219 = 147;
	public static readonly int FRAME_attak220 = 148;
	public static readonly int FRAME_attak221 = 149;
	public static readonly int FRAME_attak222 = 150;
	public static readonly int FRAME_attak223 = 151;
	public static readonly int FRAME_attak224 = 152;
	public static readonly int FRAME_attak225 = 153;
	public static readonly int FRAME_attak226 = 154;
	public static readonly int FRAME_attak227 = 155;
	public static readonly int FRAME_attak228 = 156;
	public static readonly int FRAME_attak229 = 157;
	public static readonly int FRAME_attak230 = 158;
	public static readonly int FRAME_pain101 = 159;
	public static readonly int FRAME_pain102 = 160;
	public static readonly int FRAME_pain103 = 161;
	public static readonly int FRAME_pain104 = 162;
	public static readonly int FRAME_pain105 = 163;
	public static readonly int FRAME_pain106 = 164;
	public static readonly int FRAME_pain107 = 165;
	public static readonly int FRAME_pain108 = 166;
	public static readonly int FRAME_pain109 = 167;
	public static readonly int FRAME_pain110 = 168;
	public static readonly int FRAME_pain111 = 169;
	public static readonly int FRAME_pain112 = 170;
	public static readonly int FRAME_pain113 = 171;
	public static readonly int FRAME_pain114 = 172;
	public static readonly int FRAME_pain115 = 173;
	public static readonly int FRAME_pain116 = 174;
	public static readonly int FRAME_pain117 = 175;
	public static readonly int FRAME_pain118 = 176;
	public static readonly int FRAME_pain201 = 177;
	public static readonly int FRAME_pain202 = 178;
	public static readonly int FRAME_pain203 = 179;
	public static readonly int FRAME_pain204 = 180;
	public static readonly int FRAME_pain205 = 181;
	public static readonly int FRAME_pain206 = 182;
	public static readonly int FRAME_pain207 = 183;
	public static readonly int FRAME_pain208 = 184;
	public static readonly int FRAME_pain301 = 185;
	public static readonly int FRAME_pain302 = 186;
	public static readonly int FRAME_pain303 = 187;
	public static readonly int FRAME_pain304 = 188;
	public static readonly int FRAME_pain305 = 189;
	public static readonly int FRAME_death01 = 190;
	public static readonly int FRAME_death02 = 191;
	public static readonly int FRAME_death03 = 192;
	public static readonly int FRAME_death04 = 193;
	public static readonly int FRAME_death05 = 194;
	public static readonly int FRAME_death06 = 195;
	public static readonly int FRAME_death07 = 196;
	public static readonly int FRAME_death08 = 197;
	public static readonly int FRAME_death09 = 198;
	public static readonly int FRAME_death10 = 199;
	public static readonly int FRAME_death11 = 200;
	public static readonly int FRAME_duck01 = 201;
	public static readonly int FRAME_duck02 = 202;
	public static readonly int FRAME_duck03 = 203;
	public static readonly int FRAME_duck04 = 204;
	public static readonly int FRAME_duck05 = 205;
	public static readonly int FRAME_duck06 = 206;
	public static readonly int FRAME_duck07 = 207;
	public static readonly int FRAME_duck08 = 208;
	public static readonly float MODEL_SCALE = 1.150000f;
	private static int sound_pain;
	private static int sound_pain2;
	private static int sound_death;
	private static int sound_idle;
	private static int sound_open;
	private static int sound_search;
	private static int sound_sight;

	private static readonly EntThinkAdapter gunner_idlesound = new("gunner_idlesound", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Gunner.sound_idle, 1, Defines.ATTN_IDLE, 0);

		return true;
	});

	private static readonly EntInteractAdapter gunner_sight = new("gunner_sight", (self, other) =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Gunner.sound_sight, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter gunner_search = new("gunner_search", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Gunner.sound_search, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly mframe_t[] gunner_frames_fidget =
	{
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, M_Gunner.gunner_idlesound),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null)
	};

	private static readonly EntThinkAdapter gunner_stand = new("gunner_stand", self =>
	{
		self.monsterinfo.currentmove = M_Gunner.gunner_move_stand;

		return true;
	});

	private static readonly mmove_t gunner_move_fidget =
		new(M_Gunner.FRAME_stand31, M_Gunner.FRAME_stand70, M_Gunner.gunner_frames_fidget, M_Gunner.gunner_stand);

	private static readonly EntThinkAdapter gunner_fidget = new("gunner_fidget", self =>
	{
		if ((self.monsterinfo.aiflags & Defines.AI_STAND_GROUND) != 0)
			return true;

		if (Lib.random() <= 0.05)
			self.monsterinfo.currentmove = M_Gunner.gunner_move_fidget;

		return true;
	});

	private static readonly mframe_t[] gunner_frames_stand =
	{
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, M_Gunner.gunner_fidget),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, M_Gunner.gunner_fidget),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, M_Gunner.gunner_fidget)
	};

	private static readonly mmove_t gunner_move_stand = new(M_Gunner.FRAME_stand01, M_Gunner.FRAME_stand30, M_Gunner.gunner_frames_stand, null);

	private static readonly mframe_t[] gunner_frames_walk =
	{
		new(GameAI.ai_walk, 0, null),
		new(GameAI.ai_walk, 3, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 7, null),
		new(GameAI.ai_walk, 2, null),
		new(GameAI.ai_walk, 6, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 2, null),
		new(GameAI.ai_walk, 7, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 7, null),
		new(GameAI.ai_walk, 4, null)
	};

	private static readonly mmove_t gunner_move_walk = new(M_Gunner.FRAME_walk07, M_Gunner.FRAME_walk19, M_Gunner.gunner_frames_walk, null);

	private static readonly EntThinkAdapter gunner_walk = new("gunner_walk", self =>
	{
		self.monsterinfo.currentmove = M_Gunner.gunner_move_walk;

		return true;
	});

	private static readonly mframe_t[] gunner_frames_run =
	{
		new(GameAI.ai_run, 26, null),
		new(GameAI.ai_run, 9, null),
		new(GameAI.ai_run, 9, null),
		new(GameAI.ai_run, 9, null),
		new(GameAI.ai_run, 15, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 6, null)
	};

	private static readonly mmove_t gunner_move_run = new(M_Gunner.FRAME_run01, M_Gunner.FRAME_run08, M_Gunner.gunner_frames_run, null);

	private static readonly EntThinkAdapter gunner_run = new("gunner_run", self =>
	{
		if ((self.monsterinfo.aiflags & Defines.AI_STAND_GROUND) != 0)
			self.monsterinfo.currentmove = M_Gunner.gunner_move_stand;
		else
			self.monsterinfo.currentmove = M_Gunner.gunner_move_run;

		return true;
	});

	private static readonly mframe_t[] gunner_frames_runandshoot =
	{
		new(GameAI.ai_run, 32, null),
		new(GameAI.ai_run, 15, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 18, null),
		new(GameAI.ai_run, 8, null),
		new(GameAI.ai_run, 20, null)
	};

	private static readonly mmove_t gunner_move_runandshoot = new(M_Gunner.FRAME_runs01, M_Gunner.FRAME_runs06, M_Gunner.gunner_frames_runandshoot, null);

	private static EntThinkAdapter gunner_runandshoot = new("gunner_runandshoot", self =>
	{
		self.monsterinfo.currentmove = M_Gunner.gunner_move_runandshoot;

		return true;
	});

	private static readonly mframe_t[] gunner_frames_pain3 =
	{
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 1, null)
	};

	private static readonly mmove_t gunner_move_pain3 =
		new(M_Gunner.FRAME_pain301, M_Gunner.FRAME_pain305, M_Gunner.gunner_frames_pain3, M_Gunner.gunner_run);

	private static readonly mframe_t[] gunner_frames_pain2 =
	{
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, 11, null),
		new(GameAI.ai_move, 6, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -7, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, -7, null)
	};

	private static readonly mmove_t gunner_move_pain2 =
		new(M_Gunner.FRAME_pain201, M_Gunner.FRAME_pain208, M_Gunner.gunner_frames_pain2, M_Gunner.gunner_run);

	private static readonly mframe_t[] gunner_frames_pain1 =
	{
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -5, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t gunner_move_pain1 =
		new(M_Gunner.FRAME_pain101, M_Gunner.FRAME_pain118, M_Gunner.gunner_frames_pain1, M_Gunner.gunner_run);

	private static readonly EntPainAdapter gunner_pain = new("gunner_pain", (self, other, kick, damage) =>
	{
		if (self.health < self.max_health / 2)
			self.s.skinnum = 1;

		if (GameBase.level.time < self.pain_debounce_time)
			return;

		self.pain_debounce_time = GameBase.level.time + 3;

		if ((Lib.rand() & 1) != 0)
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Gunner.sound_pain, 1, Defines.ATTN_NORM, 0);
		else
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Gunner.sound_pain2, 1, Defines.ATTN_NORM, 0);

		if (GameBase.skill.value == 3)
			return; // no pain anims in nightmare

		if (damage <= 10)
			self.monsterinfo.currentmove = M_Gunner.gunner_move_pain3;
		else if (damage <= 25)
			self.monsterinfo.currentmove = M_Gunner.gunner_move_pain2;
		else
			self.monsterinfo.currentmove = M_Gunner.gunner_move_pain1;
	});

	private static readonly EntThinkAdapter gunner_dead = new("gunner_dead", self =>
	{
		Math3D.VectorSet(self.mins, -16, -16, -24);
		Math3D.VectorSet(self.maxs, 16, 16, -8);
		self.movetype = Defines.MOVETYPE_TOSS;
		self.svflags |= Defines.SVF_DEADMONSTER;
		self.nextthink = 0;
		GameBase.gi.linkentity(self);

		return true;
	});

	private static readonly mframe_t[] gunner_frames_death =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -7, null),
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, -5, null),
		new(GameAI.ai_move, 8, null),
		new(GameAI.ai_move, 6, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t gunner_move_death =
		new(M_Gunner.FRAME_death01, M_Gunner.FRAME_death11, M_Gunner.gunner_frames_death, M_Gunner.gunner_dead);

	private static readonly EntDieAdapter gunner_die = new("gunner_die", (self, inflictor, attacker, damage, point) =>
	{
		int n;

		//	check for gib
		if (self.health <= self.gib_health)
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_NORM, 0);

			for (n = 0; n < 2; n++)
				GameMisc.ThrowGib(self, "models/objects/gibs/bone/tris.md2", damage, Defines.GIB_ORGANIC);

			for (n = 0; n < 4; n++)
				GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC);

			GameMisc.ThrowHead(self, "models/objects/gibs/head2/tris.md2", damage, Defines.GIB_ORGANIC);
			self.deadflag = Defines.DEAD_DEAD;

			return;
		}

		if (self.deadflag == Defines.DEAD_DEAD)
			return;

		//	regular death
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Gunner.sound_death, 1, Defines.ATTN_NORM, 0);
		self.deadflag = Defines.DEAD_DEAD;
		self.takedamage = Defines.DAMAGE_YES;
		self.monsterinfo.currentmove = M_Gunner.gunner_move_death;
	});

	private static readonly EntThinkAdapter gunner_duck_down = new("gunner_duck_down", self =>
	{
		if ((self.monsterinfo.aiflags & Defines.AI_DUCKED) != 0)
			return true;

		self.monsterinfo.aiflags |= Defines.AI_DUCKED;

		if (GameBase.skill.value >= 2)
		{
			if (Lib.random() > 0.5)
				M_Gunner.GunnerGrenade.think(self);
		}

		self.maxs[2] -= 32;
		self.takedamage = Defines.DAMAGE_YES;
		self.monsterinfo.pausetime = GameBase.level.time + 1;
		GameBase.gi.linkentity(self);

		return true;
	});

	private static readonly EntThinkAdapter gunner_duck_hold = new("gunner_duck_hold", self =>
	{
		if (GameBase.level.time >= self.monsterinfo.pausetime)
			self.monsterinfo.aiflags &= ~Defines.AI_HOLD_FRAME;
		else
			self.monsterinfo.aiflags |= Defines.AI_HOLD_FRAME;

		return true;
	});

	private static readonly EntThinkAdapter gunner_duck_up = new("gunner_duck_up", self =>
	{
		self.monsterinfo.aiflags &= ~Defines.AI_DUCKED;
		self.maxs[2] += 32;
		self.takedamage = Defines.DAMAGE_AIM;
		GameBase.gi.linkentity(self);

		return true;
	});

	private static readonly mframe_t[] gunner_frames_duck =
	{
		new(GameAI.ai_move, 1, M_Gunner.gunner_duck_down),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 1, M_Gunner.gunner_duck_hold),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, 0, M_Gunner.gunner_duck_up),
		new(GameAI.ai_move, -1, null)
	};

	private static readonly mmove_t gunner_move_duck = new(M_Gunner.FRAME_duck01, M_Gunner.FRAME_duck08, M_Gunner.gunner_frames_duck, M_Gunner.gunner_run);

	private static readonly EntDodgeAdapter gunner_dodge = new("gunner_dodge", (self, attacker, eta) =>
	{
		if (Lib.random() > 0.25)
			return;

		if (self.enemy == null)
			self.enemy = attacker;

		self.monsterinfo.currentmove = M_Gunner.gunner_move_duck;
	});

	private static readonly EntThinkAdapter gunner_opengun = new("gunner_opengun", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Gunner.sound_open, 1, Defines.ATTN_IDLE, 0);

		return true;
	});

	private static readonly EntThinkAdapter GunnerFire = new("GunnerFire", self =>
	{
		float[] start = { 0, 0, 0 };
		float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
		float[] target = { 0, 0, 0 };
		float[] aim = { 0, 0, 0 };
		int flash_number;

		flash_number = Defines.MZ2_GUNNER_MACHINEGUN_1 + (self.s.frame - M_Gunner.FRAME_attak216);

		Math3D.AngleVectors(self.s.angles, forward, right, null);
		Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start);

		// project enemy back a bit and target there
		Math3D.VectorCopy(self.enemy.s.origin, target);
		Math3D.VectorMA(target, -0.2f, self.enemy.velocity, target);
		target[2] += self.enemy.viewheight;

		Math3D.VectorSubtract(target, start, aim);
		Math3D.VectorNormalize(aim);
		Monster.monster_fire_bullet(self, start, aim, 3, 4, Defines.DEFAULT_BULLET_HSPREAD, Defines.DEFAULT_BULLET_VSPREAD, flash_number);

		return true;
	});

	private static readonly EntThinkAdapter GunnerGrenade = new("GunnerGrenade", self =>
	{
		float[] start = { 0, 0, 0 };
		float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
		float[] aim = { 0, 0, 0 };
		int flash_number;

		if (self.s.frame == M_Gunner.FRAME_attak105)
			flash_number = Defines.MZ2_GUNNER_GRENADE_1;
		else if (self.s.frame == M_Gunner.FRAME_attak108)
			flash_number = Defines.MZ2_GUNNER_GRENADE_2;
		else if (self.s.frame == M_Gunner.FRAME_attak111)
			flash_number = Defines.MZ2_GUNNER_GRENADE_3;
		else

			// (self.s.frame == FRAME_attak114)
			flash_number = Defines.MZ2_GUNNER_GRENADE_4;

		Math3D.AngleVectors(self.s.angles, forward, right, null);
		Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start);

		//FIXME : do a spread -225 -75 75 225 degrees around forward
		Math3D.VectorCopy(forward, aim);

		Monster.monster_fire_grenade(self, start, aim, 50, 600, flash_number);

		return true;
	});

	private static readonly EntThinkAdapter gunner_attack = new("gunner_attack", self =>
	{
		if (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE)
			self.monsterinfo.currentmove = M_Gunner.gunner_move_attack_chain;
		else
		{
			if (Lib.random() <= 0.5)
				self.monsterinfo.currentmove = M_Gunner.gunner_move_attack_grenade;
			else
				self.monsterinfo.currentmove = M_Gunner.gunner_move_attack_chain;
		}

		return true;
	});

	private static readonly EntThinkAdapter gunner_fire_chain = new("gunner_fire_chain", self =>
	{
		self.monsterinfo.currentmove = M_Gunner.gunner_move_fire_chain;

		return true;
	});

	private static readonly mframe_t[] gunner_frames_attack_chain =
	{
		new(GameAI.ai_charge, 0, M_Gunner.gunner_opengun),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null)
	};

	private static readonly mmove_t gunner_move_attack_chain =
		new(M_Gunner.FRAME_attak209, M_Gunner.FRAME_attak215, M_Gunner.gunner_frames_attack_chain, M_Gunner.gunner_fire_chain);

	private static readonly mframe_t[] gunner_frames_fire_chain =
	{
		new(GameAI.ai_charge, 0, M_Gunner.GunnerFire),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerFire),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerFire),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerFire),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerFire),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerFire),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerFire),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerFire)
	};

	private static readonly EntThinkAdapter gunner_refire_chain = new("gunner_refire_chain", self =>
	{
		if (self.enemy.health > 0)
		{
			if (GameUtil.visible(self, self.enemy))
			{
				if (Lib.random() <= 0.5)
				{
					self.monsterinfo.currentmove = M_Gunner.gunner_move_fire_chain;

					return true;
				}
			}
		}

		self.monsterinfo.currentmove = M_Gunner.gunner_move_endfire_chain;

		return true;
	});

	private static readonly mmove_t gunner_move_fire_chain =
		new(M_Gunner.FRAME_attak216, M_Gunner.FRAME_attak223, M_Gunner.gunner_frames_fire_chain, M_Gunner.gunner_refire_chain);

	private static readonly mframe_t[] gunner_frames_endfire_chain =
	{
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null)
	};

	private static readonly mmove_t gunner_move_endfire_chain =
		new(M_Gunner.FRAME_attak224, M_Gunner.FRAME_attak230, M_Gunner.gunner_frames_endfire_chain, M_Gunner.gunner_run);

	private static readonly mframe_t[] gunner_frames_attack_grenade =
	{
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerGrenade),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerGrenade),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerGrenade),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Gunner.GunnerGrenade),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null)
	};

	private static readonly mmove_t gunner_move_attack_grenade =
		new(M_Gunner.FRAME_attak101, M_Gunner.FRAME_attak121, M_Gunner.gunner_frames_attack_grenade, M_Gunner.gunner_run);

	/*
	 * QUAKED monster_gunner (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
	 * Trigger_Spawn Sight
	 */
	public static void SP_monster_gunner(edict_t self)
	{
		if (GameBase.deathmatch.value != 0)
		{
			GameUtil.G_FreeEdict(self);

			return;
		}

		M_Gunner.sound_death = GameBase.gi.soundindex("gunner/death1.wav");
		M_Gunner.sound_pain = GameBase.gi.soundindex("gunner/gunpain2.wav");
		M_Gunner.sound_pain2 = GameBase.gi.soundindex("gunner/gunpain1.wav");
		M_Gunner.sound_idle = GameBase.gi.soundindex("gunner/gunidle1.wav");
		M_Gunner.sound_open = GameBase.gi.soundindex("gunner/gunatck1.wav");
		M_Gunner.sound_search = GameBase.gi.soundindex("gunner/gunsrch1.wav");
		M_Gunner.sound_sight = GameBase.gi.soundindex("gunner/sight1.wav");

		GameBase.gi.soundindex("gunner/gunatck2.wav");
		GameBase.gi.soundindex("gunner/gunatck3.wav");

		self.movetype = Defines.MOVETYPE_STEP;
		self.solid = Defines.SOLID_BBOX;
		self.s.modelindex = GameBase.gi.modelindex("models/monsters/gunner/tris.md2");
		Math3D.VectorSet(self.mins, -16, -16, -24);
		Math3D.VectorSet(self.maxs, 16, 16, 32);

		self.health = 175;
		self.gib_health = -70;
		self.mass = 200;

		self.pain = M_Gunner.gunner_pain;
		self.die = M_Gunner.gunner_die;

		self.monsterinfo.stand = M_Gunner.gunner_stand;
		self.monsterinfo.walk = M_Gunner.gunner_walk;
		self.monsterinfo.run = M_Gunner.gunner_run;
		self.monsterinfo.dodge = M_Gunner.gunner_dodge;
		self.monsterinfo.attack = M_Gunner.gunner_attack;
		self.monsterinfo.melee = null;
		self.monsterinfo.sight = M_Gunner.gunner_sight;
		self.monsterinfo.search = M_Gunner.gunner_search;

		GameBase.gi.linkentity(self);

		self.monsterinfo.currentmove = M_Gunner.gunner_move_stand;
		self.monsterinfo.scale = M_Gunner.MODEL_SCALE;

		GameAI.walkmonster_start.think(self);
	}
}