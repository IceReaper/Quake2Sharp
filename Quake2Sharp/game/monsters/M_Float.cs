/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
namespace Quake2Sharp.game.monsters;

using adapters;
using types;
using util;

public class M_Float
{
	//	This file generated by ModelGen - Do NOT Modify
	public static readonly int FRAME_actvat01 = 0;
	public static readonly int FRAME_actvat02 = 1;
	public static readonly int FRAME_actvat03 = 2;
	public static readonly int FRAME_actvat04 = 3;
	public static readonly int FRAME_actvat05 = 4;
	public static readonly int FRAME_actvat06 = 5;
	public static readonly int FRAME_actvat07 = 6;
	public static readonly int FRAME_actvat08 = 7;
	public static readonly int FRAME_actvat09 = 8;
	public static readonly int FRAME_actvat10 = 9;
	public static readonly int FRAME_actvat11 = 10;
	public static readonly int FRAME_actvat12 = 11;
	public static readonly int FRAME_actvat13 = 12;
	public static readonly int FRAME_actvat14 = 13;
	public static readonly int FRAME_actvat15 = 14;
	public static readonly int FRAME_actvat16 = 15;
	public static readonly int FRAME_actvat17 = 16;
	public static readonly int FRAME_actvat18 = 17;
	public static readonly int FRAME_actvat19 = 18;
	public static readonly int FRAME_actvat20 = 19;
	public static readonly int FRAME_actvat21 = 20;
	public static readonly int FRAME_actvat22 = 21;
	public static readonly int FRAME_actvat23 = 22;
	public static readonly int FRAME_actvat24 = 23;
	public static readonly int FRAME_actvat25 = 24;
	public static readonly int FRAME_actvat26 = 25;
	public static readonly int FRAME_actvat27 = 26;
	public static readonly int FRAME_actvat28 = 27;
	public static readonly int FRAME_actvat29 = 28;
	public static readonly int FRAME_actvat30 = 29;
	public static readonly int FRAME_actvat31 = 30;
	public static readonly int FRAME_attak101 = 31;
	public static readonly int FRAME_attak102 = 32;
	public static readonly int FRAME_attak103 = 33;
	public static readonly int FRAME_attak104 = 34;
	public static readonly int FRAME_attak105 = 35;
	public static readonly int FRAME_attak106 = 36;
	public static readonly int FRAME_attak107 = 37;
	public static readonly int FRAME_attak108 = 38;
	public static readonly int FRAME_attak109 = 39;
	public static readonly int FRAME_attak110 = 40;
	public static readonly int FRAME_attak111 = 41;
	public static readonly int FRAME_attak112 = 42;
	public static readonly int FRAME_attak113 = 43;
	public static readonly int FRAME_attak114 = 44;
	public static readonly int FRAME_attak201 = 45;
	public static readonly int FRAME_attak202 = 46;
	public static readonly int FRAME_attak203 = 47;
	public static readonly int FRAME_attak204 = 48;
	public static readonly int FRAME_attak205 = 49;
	public static readonly int FRAME_attak206 = 50;
	public static readonly int FRAME_attak207 = 51;
	public static readonly int FRAME_attak208 = 52;
	public static readonly int FRAME_attak209 = 53;
	public static readonly int FRAME_attak210 = 54;
	public static readonly int FRAME_attak211 = 55;
	public static readonly int FRAME_attak212 = 56;
	public static readonly int FRAME_attak213 = 57;
	public static readonly int FRAME_attak214 = 58;
	public static readonly int FRAME_attak215 = 59;
	public static readonly int FRAME_attak216 = 60;
	public static readonly int FRAME_attak217 = 61;
	public static readonly int FRAME_attak218 = 62;
	public static readonly int FRAME_attak219 = 63;
	public static readonly int FRAME_attak220 = 64;
	public static readonly int FRAME_attak221 = 65;
	public static readonly int FRAME_attak222 = 66;
	public static readonly int FRAME_attak223 = 67;
	public static readonly int FRAME_attak224 = 68;
	public static readonly int FRAME_attak225 = 69;
	public static readonly int FRAME_attak301 = 70;
	public static readonly int FRAME_attak302 = 71;
	public static readonly int FRAME_attak303 = 72;
	public static readonly int FRAME_attak304 = 73;
	public static readonly int FRAME_attak305 = 74;
	public static readonly int FRAME_attak306 = 75;
	public static readonly int FRAME_attak307 = 76;
	public static readonly int FRAME_attak308 = 77;
	public static readonly int FRAME_attak309 = 78;
	public static readonly int FRAME_attak310 = 79;
	public static readonly int FRAME_attak311 = 80;
	public static readonly int FRAME_attak312 = 81;
	public static readonly int FRAME_attak313 = 82;
	public static readonly int FRAME_attak314 = 83;
	public static readonly int FRAME_attak315 = 84;
	public static readonly int FRAME_attak316 = 85;
	public static readonly int FRAME_attak317 = 86;
	public static readonly int FRAME_attak318 = 87;
	public static readonly int FRAME_attak319 = 88;
	public static readonly int FRAME_attak320 = 89;
	public static readonly int FRAME_attak321 = 90;
	public static readonly int FRAME_attak322 = 91;
	public static readonly int FRAME_attak323 = 92;
	public static readonly int FRAME_attak324 = 93;
	public static readonly int FRAME_attak325 = 94;
	public static readonly int FRAME_attak326 = 95;
	public static readonly int FRAME_attak327 = 96;
	public static readonly int FRAME_attak328 = 97;
	public static readonly int FRAME_attak329 = 98;
	public static readonly int FRAME_attak330 = 99;
	public static readonly int FRAME_attak331 = 100;
	public static readonly int FRAME_attak332 = 101;
	public static readonly int FRAME_attak333 = 102;
	public static readonly int FRAME_attak334 = 103;
	public static readonly int FRAME_death01 = 104;
	public static readonly int FRAME_death02 = 105;
	public static readonly int FRAME_death03 = 106;
	public static readonly int FRAME_death04 = 107;
	public static readonly int FRAME_death05 = 108;
	public static readonly int FRAME_death06 = 109;
	public static readonly int FRAME_death07 = 110;
	public static readonly int FRAME_death08 = 111;
	public static readonly int FRAME_death09 = 112;
	public static readonly int FRAME_death10 = 113;
	public static readonly int FRAME_death11 = 114;
	public static readonly int FRAME_death12 = 115;
	public static readonly int FRAME_death13 = 116;
	public static readonly int FRAME_pain101 = 117;
	public static readonly int FRAME_pain102 = 118;
	public static readonly int FRAME_pain103 = 119;
	public static readonly int FRAME_pain104 = 120;
	public static readonly int FRAME_pain105 = 121;
	public static readonly int FRAME_pain106 = 122;
	public static readonly int FRAME_pain107 = 123;
	public static readonly int FRAME_pain201 = 124;
	public static readonly int FRAME_pain202 = 125;
	public static readonly int FRAME_pain203 = 126;
	public static readonly int FRAME_pain204 = 127;
	public static readonly int FRAME_pain205 = 128;
	public static readonly int FRAME_pain206 = 129;
	public static readonly int FRAME_pain207 = 130;
	public static readonly int FRAME_pain208 = 131;
	public static readonly int FRAME_pain301 = 132;
	public static readonly int FRAME_pain302 = 133;
	public static readonly int FRAME_pain303 = 134;
	public static readonly int FRAME_pain304 = 135;
	public static readonly int FRAME_pain305 = 136;
	public static readonly int FRAME_pain306 = 137;
	public static readonly int FRAME_pain307 = 138;
	public static readonly int FRAME_pain308 = 139;
	public static readonly int FRAME_pain309 = 140;
	public static readonly int FRAME_pain310 = 141;
	public static readonly int FRAME_pain311 = 142;
	public static readonly int FRAME_pain312 = 143;
	public static readonly int FRAME_stand101 = 144;
	public static readonly int FRAME_stand102 = 145;
	public static readonly int FRAME_stand103 = 146;
	public static readonly int FRAME_stand104 = 147;
	public static readonly int FRAME_stand105 = 148;
	public static readonly int FRAME_stand106 = 149;
	public static readonly int FRAME_stand107 = 150;
	public static readonly int FRAME_stand108 = 151;
	public static readonly int FRAME_stand109 = 152;
	public static readonly int FRAME_stand110 = 153;
	public static readonly int FRAME_stand111 = 154;
	public static readonly int FRAME_stand112 = 155;
	public static readonly int FRAME_stand113 = 156;
	public static readonly int FRAME_stand114 = 157;
	public static readonly int FRAME_stand115 = 158;
	public static readonly int FRAME_stand116 = 159;
	public static readonly int FRAME_stand117 = 160;
	public static readonly int FRAME_stand118 = 161;
	public static readonly int FRAME_stand119 = 162;
	public static readonly int FRAME_stand120 = 163;
	public static readonly int FRAME_stand121 = 164;
	public static readonly int FRAME_stand122 = 165;
	public static readonly int FRAME_stand123 = 166;
	public static readonly int FRAME_stand124 = 167;
	public static readonly int FRAME_stand125 = 168;
	public static readonly int FRAME_stand126 = 169;
	public static readonly int FRAME_stand127 = 170;
	public static readonly int FRAME_stand128 = 171;
	public static readonly int FRAME_stand129 = 172;
	public static readonly int FRAME_stand130 = 173;
	public static readonly int FRAME_stand131 = 174;
	public static readonly int FRAME_stand132 = 175;
	public static readonly int FRAME_stand133 = 176;
	public static readonly int FRAME_stand134 = 177;
	public static readonly int FRAME_stand135 = 178;
	public static readonly int FRAME_stand136 = 179;
	public static readonly int FRAME_stand137 = 180;
	public static readonly int FRAME_stand138 = 181;
	public static readonly int FRAME_stand139 = 182;
	public static readonly int FRAME_stand140 = 183;
	public static readonly int FRAME_stand141 = 184;
	public static readonly int FRAME_stand142 = 185;
	public static readonly int FRAME_stand143 = 186;
	public static readonly int FRAME_stand144 = 187;
	public static readonly int FRAME_stand145 = 188;
	public static readonly int FRAME_stand146 = 189;
	public static readonly int FRAME_stand147 = 190;
	public static readonly int FRAME_stand148 = 191;
	public static readonly int FRAME_stand149 = 192;
	public static readonly int FRAME_stand150 = 193;
	public static readonly int FRAME_stand151 = 194;
	public static readonly int FRAME_stand152 = 195;
	public static readonly int FRAME_stand201 = 196;
	public static readonly int FRAME_stand202 = 197;
	public static readonly int FRAME_stand203 = 198;
	public static readonly int FRAME_stand204 = 199;
	public static readonly int FRAME_stand205 = 200;
	public static readonly int FRAME_stand206 = 201;
	public static readonly int FRAME_stand207 = 202;
	public static readonly int FRAME_stand208 = 203;
	public static readonly int FRAME_stand209 = 204;
	public static readonly int FRAME_stand210 = 205;
	public static readonly int FRAME_stand211 = 206;
	public static readonly int FRAME_stand212 = 207;
	public static readonly int FRAME_stand213 = 208;
	public static readonly int FRAME_stand214 = 209;
	public static readonly int FRAME_stand215 = 210;
	public static readonly int FRAME_stand216 = 211;
	public static readonly int FRAME_stand217 = 212;
	public static readonly int FRAME_stand218 = 213;
	public static readonly int FRAME_stand219 = 214;
	public static readonly int FRAME_stand220 = 215;
	public static readonly int FRAME_stand221 = 216;
	public static readonly int FRAME_stand222 = 217;
	public static readonly int FRAME_stand223 = 218;
	public static readonly int FRAME_stand224 = 219;
	public static readonly int FRAME_stand225 = 220;
	public static readonly int FRAME_stand226 = 221;
	public static readonly int FRAME_stand227 = 222;
	public static readonly int FRAME_stand228 = 223;
	public static readonly int FRAME_stand229 = 224;
	public static readonly int FRAME_stand230 = 225;
	public static readonly int FRAME_stand231 = 226;
	public static readonly int FRAME_stand232 = 227;
	public static readonly int FRAME_stand233 = 228;
	public static readonly int FRAME_stand234 = 229;
	public static readonly int FRAME_stand235 = 230;
	public static readonly int FRAME_stand236 = 231;
	public static readonly int FRAME_stand237 = 232;
	public static readonly int FRAME_stand238 = 233;
	public static readonly int FRAME_stand239 = 234;
	public static readonly int FRAME_stand240 = 235;
	public static readonly int FRAME_stand241 = 236;
	public static readonly int FRAME_stand242 = 237;
	public static readonly int FRAME_stand243 = 238;
	public static readonly int FRAME_stand244 = 239;
	public static readonly int FRAME_stand245 = 240;
	public static readonly int FRAME_stand246 = 241;
	public static readonly int FRAME_stand247 = 242;
	public static readonly int FRAME_stand248 = 243;
	public static readonly int FRAME_stand249 = 244;
	public static readonly int FRAME_stand250 = 245;
	public static readonly int FRAME_stand251 = 246;
	public static readonly int FRAME_stand252 = 247;
	public static readonly float MODEL_SCALE = 1.000000f;
	private static int sound_attack2;
	private static int sound_attack3;
	private static int sound_death1;
	private static int sound_idle;
	private static int sound_pain1;
	private static int sound_pain2;
	private static int sound_sight;

	private static readonly EntInteractAdapter floater_sight = new("floater_sight", (self, other) =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Float.sound_sight, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter floater_idle = new("floater_idle", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Float.sound_idle, 1, Defines.ATTN_IDLE, 0);

		return true;
	});

	private static readonly EntThinkAdapter floater_fire_blaster = new("floater_fire_blaster", self =>
	{
		float[] start = { 0, 0, 0 };
		float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
		float[] end = { 0, 0, 0 };
		float[] dir = { 0, 0, 0 };
		int effect;

		if (self.s.frame == M_Float.FRAME_attak104 || self.s.frame == M_Float.FRAME_attak107)
			effect = Defines.EF_HYPERBLASTER;
		else
			effect = 0;

		Math3D.AngleVectors(self.s.angles, forward, right, null);
		Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[Defines.MZ2_FLOAT_BLASTER_1], forward, right, start);

		Math3D.VectorCopy(self.enemy.s.origin, end);
		end[2] += self.enemy.viewheight;
		Math3D.VectorSubtract(end, start, dir);

		Monster.monster_fire_blaster(self, start, dir, 1, 1000, Defines.MZ2_FLOAT_BLASTER_1, effect);

		return true;
	});

	private static readonly mframe_t[] floater_frames_stand1 =
	{
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null)
	};

	private static readonly mmove_t floater_move_stand1 = new(M_Float.FRAME_stand101, M_Float.FRAME_stand152, M_Float.floater_frames_stand1, null);

	private static readonly mframe_t[] floater_frames_stand2 =
	{
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null)
	};

	private static readonly mmove_t floater_move_stand2 = new(M_Float.FRAME_stand201, M_Float.FRAME_stand252, M_Float.floater_frames_stand2, null);

	private static readonly EntThinkAdapter floater_stand = new("floater_stand", self =>
	{
		if (Lib.random() <= 0.5)
			self.monsterinfo.currentmove = M_Float.floater_move_stand1;
		else
			self.monsterinfo.currentmove = M_Float.floater_move_stand2;

		return true;
	});

	private static readonly mframe_t[] floater_frames_activate =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t floater_move_activate = new(M_Float.FRAME_actvat01, M_Float.FRAME_actvat31, M_Float.floater_frames_activate, null);

	private static readonly EntThinkAdapter floater_run = new("floater_run", self =>
	{
		if ((self.monsterinfo.aiflags & Defines.AI_STAND_GROUND) != 0)
			self.monsterinfo.currentmove = M_Float.floater_move_stand1;
		else
			self.monsterinfo.currentmove = M_Float.floater_move_run;

		return true;
	});

	private static readonly mframe_t[] floater_frames_attack1 =
	{
		new(GameAI.ai_charge, 0, null), // Blaster attack)
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Float.floater_fire_blaster),

		// BOOM (0, -25.8, 32.5) -- LOOP Starts
		new(GameAI.ai_charge, 0, M_Float.floater_fire_blaster),
		new(GameAI.ai_charge, 0, M_Float.floater_fire_blaster),
		new(GameAI.ai_charge, 0, M_Float.floater_fire_blaster),
		new(GameAI.ai_charge, 0, M_Float.floater_fire_blaster),
		new(GameAI.ai_charge, 0, M_Float.floater_fire_blaster),
		new(GameAI.ai_charge, 0, M_Float.floater_fire_blaster),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null)

		// -- LOOP Ends
	};

	private static readonly mmove_t floater_move_attack1 =
		new(M_Float.FRAME_attak101, M_Float.FRAME_attak114, M_Float.floater_frames_attack1, M_Float.floater_run);

	private static readonly float[] aim = { Defines.MELEE_DISTANCE, 0, 0 };

	private static readonly EntThinkAdapter floater_wham = new("floater_wham", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_WEAPON, M_Float.sound_attack3, 1, Defines.ATTN_NORM, 0);
		GameWeapon.fire_hit(self, M_Float.aim, 5 + Lib.rand() % 6, -50);

		return true;
	});

	private static readonly mframe_t[] floater_frames_attack2 =
	{
		new(GameAI.ai_charge, 0, null), // Claws
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Float.floater_wham),

		// WHAM (0, -45, 29.6) -- LOOP Starts
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),

		//							-- LOOP Ends
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null)
	};

	private static readonly mmove_t floater_move_attack2 =
		new(M_Float.FRAME_attak201, M_Float.FRAME_attak225, M_Float.floater_frames_attack2, M_Float.floater_run);

	private static readonly EntThinkAdapter floater_zap = new("floater_zap", self =>
	{
		float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
		float[] origin = { 0, 0, 0 };
		float[] dir = { 0, 0, 0 };
		float[] offset = { 0, 0, 0 };

		Math3D.VectorSubtract(self.enemy.s.origin, self.s.origin, dir);

		Math3D.AngleVectors(self.s.angles, forward, right, null);

		//FIXME use a flash and replace these two lines with the commented
		// one
		Math3D.VectorSet(offset, 18.5f, -0.9f, 10f);
		Math3D.G_ProjectSource(self.s.origin, offset, forward, right, origin);

		//		G_ProjectSource (self.s.origin,
		// monster_flash_offset[flash_number], forward, right, origin);

		GameBase.gi.sound(self, Defines.CHAN_WEAPON, M_Float.sound_attack2, 1, Defines.ATTN_NORM, 0);

		//FIXME use the flash, Luke
		GameBase.gi.WriteByte(Defines.svc_temp_entity);
		GameBase.gi.WriteByte(Defines.TE_SPLASH);
		GameBase.gi.WriteByte(32);
		GameBase.gi.WritePosition(origin);
		GameBase.gi.WriteDir(dir);
		GameBase.gi.WriteByte(1); //sparks
		GameBase.gi.multicast(origin, Defines.MULTICAST_PVS);

		GameCombat.T_Damage(
			self.enemy,
			self,
			self,
			dir,
			self.enemy.s.origin,
			Globals.vec3_origin,
			5 + Lib.rand() % 6,
			-10,
			Defines.DAMAGE_ENERGY,
			Defines.MOD_UNKNOWN
		);

		return true;
	});

	private static readonly mframe_t[] floater_frames_attack3 =
	{
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Float.floater_zap),

		//								-- LOOP Starts
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),

		//								-- LOOP Ends
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null)
	};

	private static readonly mmove_t floater_move_attack3 =
		new(M_Float.FRAME_attak301, M_Float.FRAME_attak334, M_Float.floater_frames_attack3, M_Float.floater_run);

	private static readonly mframe_t[] floater_frames_death =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly EntThinkAdapter floater_dead = new("floater_dead", self =>
	{
		Math3D.VectorSet(self.mins, -16, -16, -24);
		Math3D.VectorSet(self.maxs, 16, 16, -8);
		self.movetype = Defines.MOVETYPE_TOSS;
		self.svflags |= Defines.SVF_DEADMONSTER;
		self.nextthink = 0;
		GameBase.gi.linkentity(self);

		return true;
	});

	private static mmove_t floater_move_death = new(M_Float.FRAME_death01, M_Float.FRAME_death13, M_Float.floater_frames_death, M_Float.floater_dead);

	private static readonly mframe_t[] floater_frames_pain1 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t floater_move_pain1 =
		new(M_Float.FRAME_pain101, M_Float.FRAME_pain107, M_Float.floater_frames_pain1, M_Float.floater_run);

	private static readonly mframe_t[] floater_frames_pain2 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t floater_move_pain2 =
		new(M_Float.FRAME_pain201, M_Float.FRAME_pain208, M_Float.floater_frames_pain2, M_Float.floater_run);

	private static readonly mframe_t[] floater_frames_pain3 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t floater_move_pain3 = new(M_Float.FRAME_pain301, M_Float.FRAME_pain312, M_Float.floater_frames_pain3, M_Float.floater_run);

	private static readonly mframe_t[] floater_frames_walk =
	{
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null)
	};

	private static readonly mmove_t floater_move_walk = new(M_Float.FRAME_stand101, M_Float.FRAME_stand152, M_Float.floater_frames_walk, null);

	private static readonly mframe_t[] floater_frames_run =
	{
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null),
		new(GameAI.ai_run, 13, null)
	};

	private static readonly mmove_t floater_move_run = new(M_Float.FRAME_stand101, M_Float.FRAME_stand152, M_Float.floater_frames_run, null);

	private static readonly EntThinkAdapter floater_walk = new("floater_walk", self =>
	{
		self.monsterinfo.currentmove = M_Float.floater_move_walk;

		return true;
	});

	private static readonly EntThinkAdapter floater_attack = new("floater_attack", self =>
	{
		self.monsterinfo.currentmove = M_Float.floater_move_attack1;

		return true;
	});

	private static readonly EntThinkAdapter floater_melee = new("floater_melee", self =>
	{
		if (Lib.random() < 0.5)
			self.monsterinfo.currentmove = M_Float.floater_move_attack3;
		else
			self.monsterinfo.currentmove = M_Float.floater_move_attack2;

		return true;
	});

	private static readonly EntPainAdapter floater_pain = new("floater_pain", (self, other, kick, damage) =>
	{
		int n;

		if (self.health < self.max_health / 2)
			self.s.skinnum = 1;

		if (GameBase.level.time < self.pain_debounce_time)
			return;

		self.pain_debounce_time = GameBase.level.time + 3;

		if (GameBase.skill.value == 3)
			return; // no pain anims in nightmare

		n = (Lib.rand() + 1) % 3;

		if (n == 0)
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Float.sound_pain1, 1, Defines.ATTN_NORM, 0);
			self.monsterinfo.currentmove = M_Float.floater_move_pain1;
		}
		else
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Float.sound_pain2, 1, Defines.ATTN_NORM, 0);
			self.monsterinfo.currentmove = M_Float.floater_move_pain2;
		}

		return;
	});

	private static readonly EntDieAdapter floater_die = new("floater_die", (self, inflictor, attacker, damage, point) =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Float.sound_death1, 1, Defines.ATTN_NORM, 0);
		GameMisc.BecomeExplosion1(self);
	});

	/*
	 * QUAKED monster_floater (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
	 * Trigger_Spawn Sight
	 */
	public static void SP_monster_floater(edict_t self)
	{
		if (GameBase.deathmatch.value != 0)
		{
			GameUtil.G_FreeEdict(self);

			return;
		}

		M_Float.sound_attack2 = GameBase.gi.soundindex("floater/fltatck2.wav");
		M_Float.sound_attack3 = GameBase.gi.soundindex("floater/fltatck3.wav");
		M_Float.sound_death1 = GameBase.gi.soundindex("floater/fltdeth1.wav");
		M_Float.sound_idle = GameBase.gi.soundindex("floater/fltidle1.wav");
		M_Float.sound_pain1 = GameBase.gi.soundindex("floater/fltpain1.wav");
		M_Float.sound_pain2 = GameBase.gi.soundindex("floater/fltpain2.wav");
		M_Float.sound_sight = GameBase.gi.soundindex("floater/fltsght1.wav");

		GameBase.gi.soundindex("floater/fltatck1.wav");

		self.s.sound = GameBase.gi.soundindex("floater/fltsrch1.wav");

		self.movetype = Defines.MOVETYPE_STEP;
		self.solid = Defines.SOLID_BBOX;
		self.s.modelindex = GameBase.gi.modelindex("models/monsters/float/tris.md2");
		Math3D.VectorSet(self.mins, -24, -24, -24);
		Math3D.VectorSet(self.maxs, 24, 24, 32);

		self.health = 200;
		self.gib_health = -80;
		self.mass = 300;

		self.pain = M_Float.floater_pain;
		self.die = M_Float.floater_die;

		self.monsterinfo.stand = M_Float.floater_stand;
		self.monsterinfo.walk = M_Float.floater_walk;
		self.monsterinfo.run = M_Float.floater_run;

		//		self.monsterinfo.dodge = floater_dodge;
		self.monsterinfo.attack = M_Float.floater_attack;
		self.monsterinfo.melee = M_Float.floater_melee;
		self.monsterinfo.sight = M_Float.floater_sight;
		self.monsterinfo.idle = M_Float.floater_idle;

		GameBase.gi.linkentity(self);

		if (Lib.random() <= 0.5)
			self.monsterinfo.currentmove = M_Float.floater_move_stand1;
		else
			self.monsterinfo.currentmove = M_Float.floater_move_stand2;

		self.monsterinfo.scale = M_Float.MODEL_SCALE;

		GameAI.flymonster_start.think(self);
	}
}