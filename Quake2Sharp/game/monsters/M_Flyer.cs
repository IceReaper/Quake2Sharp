/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
namespace Quake2Sharp.game.monsters;

using adapters;
using types;
using util;

public class M_Flyer
{
	//	This file generated by ModelGen - Do NOT Modify
	public static readonly int ACTION_nothing = 0;
	public static readonly int ACTION_attack1 = 1;
	public static readonly int ACTION_attack2 = 2;
	public static readonly int ACTION_run = 3;
	public static readonly int ACTION_walk = 4;
	public static readonly int FRAME_start01 = 0;
	public static readonly int FRAME_start02 = 1;
	public static readonly int FRAME_start03 = 2;
	public static readonly int FRAME_start04 = 3;
	public static readonly int FRAME_start05 = 4;
	public static readonly int FRAME_start06 = 5;
	public static readonly int FRAME_stop01 = 6;
	public static readonly int FRAME_stop02 = 7;
	public static readonly int FRAME_stop03 = 8;
	public static readonly int FRAME_stop04 = 9;
	public static readonly int FRAME_stop05 = 10;
	public static readonly int FRAME_stop06 = 11;
	public static readonly int FRAME_stop07 = 12;
	public static readonly int FRAME_stand01 = 13;
	public static readonly int FRAME_stand02 = 14;
	public static readonly int FRAME_stand03 = 15;
	public static readonly int FRAME_stand04 = 16;
	public static readonly int FRAME_stand05 = 17;
	public static readonly int FRAME_stand06 = 18;
	public static readonly int FRAME_stand07 = 19;
	public static readonly int FRAME_stand08 = 20;
	public static readonly int FRAME_stand09 = 21;
	public static readonly int FRAME_stand10 = 22;
	public static readonly int FRAME_stand11 = 23;
	public static readonly int FRAME_stand12 = 24;
	public static readonly int FRAME_stand13 = 25;
	public static readonly int FRAME_stand14 = 26;
	public static readonly int FRAME_stand15 = 27;
	public static readonly int FRAME_stand16 = 28;
	public static readonly int FRAME_stand17 = 29;
	public static readonly int FRAME_stand18 = 30;
	public static readonly int FRAME_stand19 = 31;
	public static readonly int FRAME_stand20 = 32;
	public static readonly int FRAME_stand21 = 33;
	public static readonly int FRAME_stand22 = 34;
	public static readonly int FRAME_stand23 = 35;
	public static readonly int FRAME_stand24 = 36;
	public static readonly int FRAME_stand25 = 37;
	public static readonly int FRAME_stand26 = 38;
	public static readonly int FRAME_stand27 = 39;
	public static readonly int FRAME_stand28 = 40;
	public static readonly int FRAME_stand29 = 41;
	public static readonly int FRAME_stand30 = 42;
	public static readonly int FRAME_stand31 = 43;
	public static readonly int FRAME_stand32 = 44;
	public static readonly int FRAME_stand33 = 45;
	public static readonly int FRAME_stand34 = 46;
	public static readonly int FRAME_stand35 = 47;
	public static readonly int FRAME_stand36 = 48;
	public static readonly int FRAME_stand37 = 49;
	public static readonly int FRAME_stand38 = 50;
	public static readonly int FRAME_stand39 = 51;
	public static readonly int FRAME_stand40 = 52;
	public static readonly int FRAME_stand41 = 53;
	public static readonly int FRAME_stand42 = 54;
	public static readonly int FRAME_stand43 = 55;
	public static readonly int FRAME_stand44 = 56;
	public static readonly int FRAME_stand45 = 57;
	public static readonly int FRAME_attak101 = 58;
	public static readonly int FRAME_attak102 = 59;
	public static readonly int FRAME_attak103 = 60;
	public static readonly int FRAME_attak104 = 61;
	public static readonly int FRAME_attak105 = 62;
	public static readonly int FRAME_attak106 = 63;
	public static readonly int FRAME_attak107 = 64;
	public static readonly int FRAME_attak108 = 65;
	public static readonly int FRAME_attak109 = 66;
	public static readonly int FRAME_attak110 = 67;
	public static readonly int FRAME_attak111 = 68;
	public static readonly int FRAME_attak112 = 69;
	public static readonly int FRAME_attak113 = 70;
	public static readonly int FRAME_attak114 = 71;
	public static readonly int FRAME_attak115 = 72;
	public static readonly int FRAME_attak116 = 73;
	public static readonly int FRAME_attak117 = 74;
	public static readonly int FRAME_attak118 = 75;
	public static readonly int FRAME_attak119 = 76;
	public static readonly int FRAME_attak120 = 77;
	public static readonly int FRAME_attak121 = 78;
	public static readonly int FRAME_attak201 = 79;
	public static readonly int FRAME_attak202 = 80;
	public static readonly int FRAME_attak203 = 81;
	public static readonly int FRAME_attak204 = 82;
	public static readonly int FRAME_attak205 = 83;
	public static readonly int FRAME_attak206 = 84;
	public static readonly int FRAME_attak207 = 85;
	public static readonly int FRAME_attak208 = 86;
	public static readonly int FRAME_attak209 = 87;
	public static readonly int FRAME_attak210 = 88;
	public static readonly int FRAME_attak211 = 89;
	public static readonly int FRAME_attak212 = 90;
	public static readonly int FRAME_attak213 = 91;
	public static readonly int FRAME_attak214 = 92;
	public static readonly int FRAME_attak215 = 93;
	public static readonly int FRAME_attak216 = 94;
	public static readonly int FRAME_attak217 = 95;
	public static readonly int FRAME_bankl01 = 96;
	public static readonly int FRAME_bankl02 = 97;
	public static readonly int FRAME_bankl03 = 98;
	public static readonly int FRAME_bankl04 = 99;
	public static readonly int FRAME_bankl05 = 100;
	public static readonly int FRAME_bankl06 = 101;
	public static readonly int FRAME_bankl07 = 102;
	public static readonly int FRAME_bankr01 = 103;
	public static readonly int FRAME_bankr02 = 104;
	public static readonly int FRAME_bankr03 = 105;
	public static readonly int FRAME_bankr04 = 106;
	public static readonly int FRAME_bankr05 = 107;
	public static readonly int FRAME_bankr06 = 108;
	public static readonly int FRAME_bankr07 = 109;
	public static readonly int FRAME_rollf01 = 110;
	public static readonly int FRAME_rollf02 = 111;
	public static readonly int FRAME_rollf03 = 112;
	public static readonly int FRAME_rollf04 = 113;
	public static readonly int FRAME_rollf05 = 114;
	public static readonly int FRAME_rollf06 = 115;
	public static readonly int FRAME_rollf07 = 116;
	public static readonly int FRAME_rollf08 = 117;
	public static readonly int FRAME_rollf09 = 118;
	public static readonly int FRAME_rollr01 = 119;
	public static readonly int FRAME_rollr02 = 120;
	public static readonly int FRAME_rollr03 = 121;
	public static readonly int FRAME_rollr04 = 122;
	public static readonly int FRAME_rollr05 = 123;
	public static readonly int FRAME_rollr06 = 124;
	public static readonly int FRAME_rollr07 = 125;
	public static readonly int FRAME_rollr08 = 126;
	public static readonly int FRAME_rollr09 = 127;
	public static readonly int FRAME_defens01 = 128;
	public static readonly int FRAME_defens02 = 129;
	public static readonly int FRAME_defens03 = 130;
	public static readonly int FRAME_defens04 = 131;
	public static readonly int FRAME_defens05 = 132;
	public static readonly int FRAME_defens06 = 133;
	public static readonly int FRAME_pain101 = 134;
	public static readonly int FRAME_pain102 = 135;
	public static readonly int FRAME_pain103 = 136;
	public static readonly int FRAME_pain104 = 137;
	public static readonly int FRAME_pain105 = 138;
	public static readonly int FRAME_pain106 = 139;
	public static readonly int FRAME_pain107 = 140;
	public static readonly int FRAME_pain108 = 141;
	public static readonly int FRAME_pain109 = 142;
	public static readonly int FRAME_pain201 = 143;
	public static readonly int FRAME_pain202 = 144;
	public static readonly int FRAME_pain203 = 145;
	public static readonly int FRAME_pain204 = 146;
	public static readonly int FRAME_pain301 = 147;
	public static readonly int FRAME_pain302 = 148;
	public static readonly int FRAME_pain303 = 149;
	public static readonly int FRAME_pain304 = 150;
	public static readonly float MODEL_SCALE = 1.000000f;
	private static int nextmove; // Used for start/stop frames
	private static int sound_sight;
	private static int sound_idle;
	private static int sound_pain1;
	private static int sound_pain2;
	private static int sound_slash;
	private static int sound_sproing;
	private static int sound_die;

	public static EntInteractAdapter flyer_sight = new("flyer_sight", (self, other) =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Flyer.sound_sight, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter flyer_idle = new("flyer_idle", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Flyer.sound_idle, 1, Defines.ATTN_IDLE, 0);

		return true;
	});

	private static readonly EntThinkAdapter flyer_pop_blades = new("flyer_pop_blades", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Flyer.sound_sproing, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly mframe_t[] flyer_frames_stand =
	{
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null)
	};

	private static readonly mmove_t flyer_move_stand = new(M_Flyer.FRAME_stand01, M_Flyer.FRAME_stand45, M_Flyer.flyer_frames_stand, null);

	private static readonly mframe_t[] flyer_frames_walk =
	{
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null),
		new(GameAI.ai_walk, 5, null)
	};

	private static readonly mmove_t flyer_move_walk = new(M_Flyer.FRAME_stand01, M_Flyer.FRAME_stand45, M_Flyer.flyer_frames_walk, null);

	private static readonly mframe_t[] flyer_frames_run =
	{
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null)
	};

	private static readonly mmove_t flyer_move_run = new(M_Flyer.FRAME_stand01, M_Flyer.FRAME_stand45, M_Flyer.flyer_frames_run, null);

	private static readonly EntThinkAdapter flyer_run = new("flyer_run", self =>
	{
		if ((self.monsterinfo.aiflags & Defines.AI_STAND_GROUND) != 0)
			self.monsterinfo.currentmove = M_Flyer.flyer_move_stand;
		else
			self.monsterinfo.currentmove = M_Flyer.flyer_move_run;

		return true;
	});

	private static readonly EntThinkAdapter flyer_walk = new("flyer_walk", self =>
	{
		self.monsterinfo.currentmove = M_Flyer.flyer_move_walk;

		return true;
	});

	private static readonly EntThinkAdapter flyer_stand = new("flyer_stand", self =>
	{
		self.monsterinfo.currentmove = M_Flyer.flyer_move_stand;

		return true;
	});

	private static readonly EntThinkAdapter flyer_nextmove = new("flyer_nextmove", self =>
	{
		if (M_Flyer.nextmove == M_Flyer.ACTION_attack1)
			self.monsterinfo.currentmove = M_Flyer.flyer_move_start_melee;
		else if (M_Flyer.nextmove == M_Flyer.ACTION_attack2)
			self.monsterinfo.currentmove = M_Flyer.flyer_move_attack2;
		else if (M_Flyer.nextmove == M_Flyer.ACTION_run)
			self.monsterinfo.currentmove = M_Flyer.flyer_move_run;

		return true;
	});

	private static readonly mframe_t[] flyer_frames_start =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, M_Flyer.flyer_nextmove)
	};

	private static readonly mmove_t flyer_move_start = new(M_Flyer.FRAME_start01, M_Flyer.FRAME_start06, M_Flyer.flyer_frames_start, null);

	private static readonly mframe_t[] flyer_frames_stop =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, M_Flyer.flyer_nextmove)
	};

	private static readonly mmove_t flyer_move_stop = new(M_Flyer.FRAME_stop01, M_Flyer.FRAME_stop07, M_Flyer.flyer_frames_stop, null);

	private static EntThinkAdapter flyer_stop = new("flyer_stop", self =>
	{
		self.monsterinfo.currentmove = M_Flyer.flyer_move_stop;

		return true;
	});

	private static EntThinkAdapter flyer_start = new("flyer_start", self =>
	{
		self.monsterinfo.currentmove = M_Flyer.flyer_move_start;

		return true;
	});

	private static readonly mframe_t[] flyer_frames_rollright =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t flyer_move_rollright = new(M_Flyer.FRAME_rollr01, M_Flyer.FRAME_rollr09, M_Flyer.flyer_frames_rollright, null);

	private static readonly mframe_t[] flyer_frames_rollleft =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t flyer_move_rollleft = new(M_Flyer.FRAME_rollf01, M_Flyer.FRAME_rollf09, M_Flyer.flyer_frames_rollleft, null);

	private static readonly mframe_t[] flyer_frames_pain3 =
	{
		new(GameAI.ai_move, 0, null), new(GameAI.ai_move, 0, null), new(GameAI.ai_move, 0, null), new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t flyer_move_pain3 = new(M_Flyer.FRAME_pain301, M_Flyer.FRAME_pain304, M_Flyer.flyer_frames_pain3, M_Flyer.flyer_run);

	private static readonly mframe_t[] flyer_frames_pain2 =
	{
		new(GameAI.ai_move, 0, null), new(GameAI.ai_move, 0, null), new(GameAI.ai_move, 0, null), new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t flyer_move_pain2 = new(M_Flyer.FRAME_pain201, M_Flyer.FRAME_pain204, M_Flyer.flyer_frames_pain2, M_Flyer.flyer_run);

	private static readonly mframe_t[] flyer_frames_pain1 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t flyer_move_pain1 = new(M_Flyer.FRAME_pain101, M_Flyer.FRAME_pain109, M_Flyer.flyer_frames_pain1, M_Flyer.flyer_run);

	private static readonly mframe_t[] flyer_frames_defense =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),

		// Hold this frame
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t flyer_move_defense = new(M_Flyer.FRAME_defens01, M_Flyer.FRAME_defens06, M_Flyer.flyer_frames_defense, null);

	private static readonly mframe_t[] flyer_frames_bankright =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t flyer_move_bankright = new(M_Flyer.FRAME_bankr01, M_Flyer.FRAME_bankr07, M_Flyer.flyer_frames_bankright, null);

	private static readonly mframe_t[] flyer_frames_bankleft =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t flyer_move_bankleft = new(M_Flyer.FRAME_bankl01, M_Flyer.FRAME_bankl07, M_Flyer.flyer_frames_bankleft, null);

	private static readonly EntThinkAdapter flyer_fireleft = new("flyer_fireleft", self =>
	{
		M_Flyer.flyer_fire(self, Defines.MZ2_FLYER_BLASTER_1);

		return true;
	});

	private static readonly EntThinkAdapter flyer_fireright = new("flyer_fireright", self =>
	{
		M_Flyer.flyer_fire(self, Defines.MZ2_FLYER_BLASTER_2);

		return true;
	});

	private static readonly mframe_t[] flyer_frames_attack2 =
	{
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, -10, M_Flyer.flyer_fireleft),

		// left gun
		new(GameAI.ai_charge, -10, M_Flyer.flyer_fireright), // right gun
		new(GameAI.ai_charge, -10, M_Flyer.flyer_fireleft), // left gun
		new(GameAI.ai_charge, -10, M_Flyer.flyer_fireright), // right gun
		new(GameAI.ai_charge, -10, M_Flyer.flyer_fireleft), // left gun
		new(GameAI.ai_charge, -10, M_Flyer.flyer_fireright), // right gun
		new(GameAI.ai_charge, -10, M_Flyer.flyer_fireleft), // left gun
		new(GameAI.ai_charge, -10, M_Flyer.flyer_fireright), // right gun
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null)
	};

	private static readonly mmove_t flyer_move_attack2 =
		new(M_Flyer.FRAME_attak201, M_Flyer.FRAME_attak217, M_Flyer.flyer_frames_attack2, M_Flyer.flyer_run);

	private static readonly EntThinkAdapter flyer_slash_left = new("flyer_slash_left", self =>
	{
		float[] aim = { 0, 0, 0 };

		Math3D.VectorSet(aim, Defines.MELEE_DISTANCE, self.mins[0], 0);
		GameWeapon.fire_hit(self, aim, 5, 0);
		GameBase.gi.sound(self, Defines.CHAN_WEAPON, M_Flyer.sound_slash, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter flyer_slash_right = new("flyer_slash_right", self =>
	{
		float[] aim = { 0, 0, 0 };

		Math3D.VectorSet(aim, Defines.MELEE_DISTANCE, self.maxs[0], 0);
		GameWeapon.fire_hit(self, aim, 5, 0);
		GameBase.gi.sound(self, Defines.CHAN_WEAPON, M_Flyer.sound_slash, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter flyer_loop_melee = new("flyer_loop_melee", self =>
	{
		/*
		 * if (random() <= 0.5) self.monsterinfo.currentmove =
		 * flyer_move_attack1; else
		 */
		self.monsterinfo.currentmove = M_Flyer.flyer_move_loop_melee;

		return true;
	});

	private static readonly mframe_t[] flyer_frames_start_melee =
	{
		new(GameAI.ai_charge, 0, M_Flyer.flyer_pop_blades),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null)
	};

	private static readonly mmove_t flyer_move_start_melee =
		new(M_Flyer.FRAME_attak101, M_Flyer.FRAME_attak106, M_Flyer.flyer_frames_start_melee, M_Flyer.flyer_loop_melee);

	private static readonly mframe_t[] flyer_frames_end_melee =
	{
		new(GameAI.ai_charge, 0, null), new(GameAI.ai_charge, 0, null), new(GameAI.ai_charge, 0, null)
	};

	private static readonly mmove_t flyer_move_end_melee =
		new(M_Flyer.FRAME_attak119, M_Flyer.FRAME_attak121, M_Flyer.flyer_frames_end_melee, M_Flyer.flyer_run);

	private static readonly mframe_t[] flyer_frames_loop_melee =
	{
		new(GameAI.ai_charge, 0, null), // Loop Start
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Flyer.flyer_slash_left),

		// Left Wing Strike
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, M_Flyer.flyer_slash_right),

		// Right Wing Strike
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null),
		new(GameAI.ai_charge, 0, null) // Loop Ends
	};

	private static readonly EntThinkAdapter flyer_check_melee = new("flyer_check_melee", self =>
	{
		if (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE)
		{
			if (Lib.random() <= 0.8)
				self.monsterinfo.currentmove = M_Flyer.flyer_move_loop_melee;
			else
				self.monsterinfo.currentmove = M_Flyer.flyer_move_end_melee;
		}
		else
			self.monsterinfo.currentmove = M_Flyer.flyer_move_end_melee;

		return true;
	});

	private static readonly mmove_t flyer_move_loop_melee =
		new(M_Flyer.FRAME_attak107, M_Flyer.FRAME_attak118, M_Flyer.flyer_frames_loop_melee, M_Flyer.flyer_check_melee);

	private static readonly EntThinkAdapter flyer_attack = new("flyer_attack", self =>
	{
		/*
		 * if (random() <= 0.5) self.monsterinfo.currentmove =
		 * flyer_move_attack1; else
		 */
		self.monsterinfo.currentmove = M_Flyer.flyer_move_attack2;

		return true;
	});

	private static EntThinkAdapter flyer_setstart = new("flyer_setstart", self =>
	{
		M_Flyer.nextmove = M_Flyer.ACTION_run;
		self.monsterinfo.currentmove = M_Flyer.flyer_move_start;

		return true;
	});

	private static readonly EntThinkAdapter flyer_melee = new("flyer_melee", self =>
	{
		//			flyer.nextmove = ACTION_attack1;
		//	 self.monsterinfo.currentmove = flyer_move_stop;
		self.monsterinfo.currentmove = M_Flyer.flyer_move_start_melee;

		return true;
	});

	private static readonly EntPainAdapter flyer_pain = new("flyer_pain", (self, other, kick, damage) =>
	{
		int n;

		if (self.health < self.max_health / 2)
			self.s.skinnum = 1;

		if (GameBase.level.time < self.pain_debounce_time)
			return;

		self.pain_debounce_time = GameBase.level.time + 3;

		if (GameBase.skill.value == 3)
			return; // no pain anims in nightmare

		n = Lib.rand() % 3;

		if (n == 0)
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Flyer.sound_pain1, 1, Defines.ATTN_NORM, 0);
			self.monsterinfo.currentmove = M_Flyer.flyer_move_pain1;
		}
		else if (n == 1)
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Flyer.sound_pain2, 1, Defines.ATTN_NORM, 0);
			self.monsterinfo.currentmove = M_Flyer.flyer_move_pain2;
		}
		else
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Flyer.sound_pain1, 1, Defines.ATTN_NORM, 0);
			self.monsterinfo.currentmove = M_Flyer.flyer_move_pain3;
		}
	});

	private static readonly EntDieAdapter flyer_die = new("flyer_die", (self, inflictor, attacker, damage, point) =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Flyer.sound_die, 1, Defines.ATTN_NORM, 0);
		GameMisc.BecomeExplosion1(self);
	});

	private static void flyer_fire(edict_t self, int flash_number)
	{
		float[] start = { 0, 0, 0 };

		float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
		float[] end = { 0, 0, 0 };
		float[] dir = { 0, 0, 0 };
		int effect;

		if (self.s.frame == M_Flyer.FRAME_attak204 || self.s.frame == M_Flyer.FRAME_attak207 || self.s.frame == M_Flyer.FRAME_attak210)
			effect = Defines.EF_HYPERBLASTER;
		else
			effect = 0;

		Math3D.AngleVectors(self.s.angles, forward, right, null);
		Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start);

		Math3D.VectorCopy(self.enemy.s.origin, end);
		end[2] += self.enemy.viewheight;
		Math3D.VectorSubtract(end, start, dir);

		Monster.monster_fire_blaster(self, start, dir, 1, 1000, flash_number, effect);
	}

	/*
	 * QUAKED monster_flyer (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
	 * Trigger_Spawn Sight
	 */
	public static void SP_monster_flyer(edict_t self)
	{
		if (GameBase.deathmatch.value != 0)
		{
			GameUtil.G_FreeEdict(self);

			return;
		}

		// fix a map bug in jail5.bsp
		if (GameBase.level.mapname.Equals("jail5", StringComparison.OrdinalIgnoreCase) && self.s.origin[2] == -104)
		{
			self.targetname = self.target;
			self.target = null;
		}

		M_Flyer.sound_sight = GameBase.gi.soundindex("flyer/flysght1.wav");
		M_Flyer.sound_idle = GameBase.gi.soundindex("flyer/flysrch1.wav");
		M_Flyer.sound_pain1 = GameBase.gi.soundindex("flyer/flypain1.wav");
		M_Flyer.sound_pain2 = GameBase.gi.soundindex("flyer/flypain2.wav");
		M_Flyer.sound_slash = GameBase.gi.soundindex("flyer/flyatck2.wav");
		M_Flyer.sound_sproing = GameBase.gi.soundindex("flyer/flyatck1.wav");
		M_Flyer.sound_die = GameBase.gi.soundindex("flyer/flydeth1.wav");

		GameBase.gi.soundindex("flyer/flyatck3.wav");

		self.s.modelindex = GameBase.gi.modelindex("models/monsters/flyer/tris.md2");
		Math3D.VectorSet(self.mins, -16, -16, -24);
		Math3D.VectorSet(self.maxs, 16, 16, 32);
		self.movetype = Defines.MOVETYPE_STEP;
		self.solid = Defines.SOLID_BBOX;

		self.s.sound = GameBase.gi.soundindex("flyer/flyidle1.wav");

		self.health = 50;
		self.mass = 50;

		self.pain = M_Flyer.flyer_pain;
		self.die = M_Flyer.flyer_die;

		self.monsterinfo.stand = M_Flyer.flyer_stand;
		self.monsterinfo.walk = M_Flyer.flyer_walk;
		self.monsterinfo.run = M_Flyer.flyer_run;
		self.monsterinfo.attack = M_Flyer.flyer_attack;
		self.monsterinfo.melee = M_Flyer.flyer_melee;
		self.monsterinfo.sight = M_Flyer.flyer_sight;
		self.monsterinfo.idle = M_Flyer.flyer_idle;

		GameBase.gi.linkentity(self);

		self.monsterinfo.currentmove = M_Flyer.flyer_move_stand;
		self.monsterinfo.scale = M_Flyer.MODEL_SCALE;

		GameAI.flymonster_start.think(self);
	}
}