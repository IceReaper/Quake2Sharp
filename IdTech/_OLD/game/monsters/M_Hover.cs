/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

using Quake2Sharp.game.adapters;
using Quake2Sharp.game.types;
using Quake2Sharp.util;

namespace Quake2Sharp.game.monsters;

public class M_Hover
{
	//	This file generated by ModelGen - Do NOT Modify
	public static readonly int FRAME_stand01 = 0;
	public static readonly int FRAME_stand02 = 1;
	public static readonly int FRAME_stand03 = 2;
	public static readonly int FRAME_stand04 = 3;
	public static readonly int FRAME_stand05 = 4;
	public static readonly int FRAME_stand06 = 5;
	public static readonly int FRAME_stand07 = 6;
	public static readonly int FRAME_stand08 = 7;
	public static readonly int FRAME_stand09 = 8;
	public static readonly int FRAME_stand10 = 9;
	public static readonly int FRAME_stand11 = 10;
	public static readonly int FRAME_stand12 = 11;
	public static readonly int FRAME_stand13 = 12;
	public static readonly int FRAME_stand14 = 13;
	public static readonly int FRAME_stand15 = 14;
	public static readonly int FRAME_stand16 = 15;
	public static readonly int FRAME_stand17 = 16;
	public static readonly int FRAME_stand18 = 17;
	public static readonly int FRAME_stand19 = 18;
	public static readonly int FRAME_stand20 = 19;
	public static readonly int FRAME_stand21 = 20;
	public static readonly int FRAME_stand22 = 21;
	public static readonly int FRAME_stand23 = 22;
	public static readonly int FRAME_stand24 = 23;
	public static readonly int FRAME_stand25 = 24;
	public static readonly int FRAME_stand26 = 25;
	public static readonly int FRAME_stand27 = 26;
	public static readonly int FRAME_stand28 = 27;
	public static readonly int FRAME_stand29 = 28;
	public static readonly int FRAME_stand30 = 29;
	public static readonly int FRAME_forwrd01 = 30;
	public static readonly int FRAME_forwrd02 = 31;
	public static readonly int FRAME_forwrd03 = 32;
	public static readonly int FRAME_forwrd04 = 33;
	public static readonly int FRAME_forwrd05 = 34;
	public static readonly int FRAME_forwrd06 = 35;
	public static readonly int FRAME_forwrd07 = 36;
	public static readonly int FRAME_forwrd08 = 37;
	public static readonly int FRAME_forwrd09 = 38;
	public static readonly int FRAME_forwrd10 = 39;
	public static readonly int FRAME_forwrd11 = 40;
	public static readonly int FRAME_forwrd12 = 41;
	public static readonly int FRAME_forwrd13 = 42;
	public static readonly int FRAME_forwrd14 = 43;
	public static readonly int FRAME_forwrd15 = 44;
	public static readonly int FRAME_forwrd16 = 45;
	public static readonly int FRAME_forwrd17 = 46;
	public static readonly int FRAME_forwrd18 = 47;
	public static readonly int FRAME_forwrd19 = 48;
	public static readonly int FRAME_forwrd20 = 49;
	public static readonly int FRAME_forwrd21 = 50;
	public static readonly int FRAME_forwrd22 = 51;
	public static readonly int FRAME_forwrd23 = 52;
	public static readonly int FRAME_forwrd24 = 53;
	public static readonly int FRAME_forwrd25 = 54;
	public static readonly int FRAME_forwrd26 = 55;
	public static readonly int FRAME_forwrd27 = 56;
	public static readonly int FRAME_forwrd28 = 57;
	public static readonly int FRAME_forwrd29 = 58;
	public static readonly int FRAME_forwrd30 = 59;
	public static readonly int FRAME_forwrd31 = 60;
	public static readonly int FRAME_forwrd32 = 61;
	public static readonly int FRAME_forwrd33 = 62;
	public static readonly int FRAME_forwrd34 = 63;
	public static readonly int FRAME_forwrd35 = 64;
	public static readonly int FRAME_stop101 = 65;
	public static readonly int FRAME_stop102 = 66;
	public static readonly int FRAME_stop103 = 67;
	public static readonly int FRAME_stop104 = 68;
	public static readonly int FRAME_stop105 = 69;
	public static readonly int FRAME_stop106 = 70;
	public static readonly int FRAME_stop107 = 71;
	public static readonly int FRAME_stop108 = 72;
	public static readonly int FRAME_stop109 = 73;
	public static readonly int FRAME_stop201 = 74;
	public static readonly int FRAME_stop202 = 75;
	public static readonly int FRAME_stop203 = 76;
	public static readonly int FRAME_stop204 = 77;
	public static readonly int FRAME_stop205 = 78;
	public static readonly int FRAME_stop206 = 79;
	public static readonly int FRAME_stop207 = 80;
	public static readonly int FRAME_stop208 = 81;
	public static readonly int FRAME_takeof01 = 82;
	public static readonly int FRAME_takeof02 = 83;
	public static readonly int FRAME_takeof03 = 84;
	public static readonly int FRAME_takeof04 = 85;
	public static readonly int FRAME_takeof05 = 86;
	public static readonly int FRAME_takeof06 = 87;
	public static readonly int FRAME_takeof07 = 88;
	public static readonly int FRAME_takeof08 = 89;
	public static readonly int FRAME_takeof09 = 90;
	public static readonly int FRAME_takeof10 = 91;
	public static readonly int FRAME_takeof11 = 92;
	public static readonly int FRAME_takeof12 = 93;
	public static readonly int FRAME_takeof13 = 94;
	public static readonly int FRAME_takeof14 = 95;
	public static readonly int FRAME_takeof15 = 96;
	public static readonly int FRAME_takeof16 = 97;
	public static readonly int FRAME_takeof17 = 98;
	public static readonly int FRAME_takeof18 = 99;
	public static readonly int FRAME_takeof19 = 100;
	public static readonly int FRAME_takeof20 = 101;
	public static readonly int FRAME_takeof21 = 102;
	public static readonly int FRAME_takeof22 = 103;
	public static readonly int FRAME_takeof23 = 104;
	public static readonly int FRAME_takeof24 = 105;
	public static readonly int FRAME_takeof25 = 106;
	public static readonly int FRAME_takeof26 = 107;
	public static readonly int FRAME_takeof27 = 108;
	public static readonly int FRAME_takeof28 = 109;
	public static readonly int FRAME_takeof29 = 110;
	public static readonly int FRAME_takeof30 = 111;
	public static readonly int FRAME_land01 = 112;
	public static readonly int FRAME_pain101 = 113;
	public static readonly int FRAME_pain102 = 114;
	public static readonly int FRAME_pain103 = 115;
	public static readonly int FRAME_pain104 = 116;
	public static readonly int FRAME_pain105 = 117;
	public static readonly int FRAME_pain106 = 118;
	public static readonly int FRAME_pain107 = 119;
	public static readonly int FRAME_pain108 = 120;
	public static readonly int FRAME_pain109 = 121;
	public static readonly int FRAME_pain110 = 122;
	public static readonly int FRAME_pain111 = 123;
	public static readonly int FRAME_pain112 = 124;
	public static readonly int FRAME_pain113 = 125;
	public static readonly int FRAME_pain114 = 126;
	public static readonly int FRAME_pain115 = 127;
	public static readonly int FRAME_pain116 = 128;
	public static readonly int FRAME_pain117 = 129;
	public static readonly int FRAME_pain118 = 130;
	public static readonly int FRAME_pain119 = 131;
	public static readonly int FRAME_pain120 = 132;
	public static readonly int FRAME_pain121 = 133;
	public static readonly int FRAME_pain122 = 134;
	public static readonly int FRAME_pain123 = 135;
	public static readonly int FRAME_pain124 = 136;
	public static readonly int FRAME_pain125 = 137;
	public static readonly int FRAME_pain126 = 138;
	public static readonly int FRAME_pain127 = 139;
	public static readonly int FRAME_pain128 = 140;
	public static readonly int FRAME_pain201 = 141;
	public static readonly int FRAME_pain202 = 142;
	public static readonly int FRAME_pain203 = 143;
	public static readonly int FRAME_pain204 = 144;
	public static readonly int FRAME_pain205 = 145;
	public static readonly int FRAME_pain206 = 146;
	public static readonly int FRAME_pain207 = 147;
	public static readonly int FRAME_pain208 = 148;
	public static readonly int FRAME_pain209 = 149;
	public static readonly int FRAME_pain210 = 150;
	public static readonly int FRAME_pain211 = 151;
	public static readonly int FRAME_pain212 = 152;
	public static readonly int FRAME_pain301 = 153;
	public static readonly int FRAME_pain302 = 154;
	public static readonly int FRAME_pain303 = 155;
	public static readonly int FRAME_pain304 = 156;
	public static readonly int FRAME_pain305 = 157;
	public static readonly int FRAME_pain306 = 158;
	public static readonly int FRAME_pain307 = 159;
	public static readonly int FRAME_pain308 = 160;
	public static readonly int FRAME_pain309 = 161;
	public static readonly int FRAME_death101 = 162;
	public static readonly int FRAME_death102 = 163;
	public static readonly int FRAME_death103 = 164;
	public static readonly int FRAME_death104 = 165;
	public static readonly int FRAME_death105 = 166;
	public static readonly int FRAME_death106 = 167;
	public static readonly int FRAME_death107 = 168;
	public static readonly int FRAME_death108 = 169;
	public static readonly int FRAME_death109 = 170;
	public static readonly int FRAME_death110 = 171;
	public static readonly int FRAME_death111 = 172;
	public static readonly int FRAME_backwd01 = 173;
	public static readonly int FRAME_backwd02 = 174;
	public static readonly int FRAME_backwd03 = 175;
	public static readonly int FRAME_backwd04 = 176;
	public static readonly int FRAME_backwd05 = 177;
	public static readonly int FRAME_backwd06 = 178;
	public static readonly int FRAME_backwd07 = 179;
	public static readonly int FRAME_backwd08 = 180;
	public static readonly int FRAME_backwd09 = 181;
	public static readonly int FRAME_backwd10 = 182;
	public static readonly int FRAME_backwd11 = 183;
	public static readonly int FRAME_backwd12 = 184;
	public static readonly int FRAME_backwd13 = 185;
	public static readonly int FRAME_backwd14 = 186;
	public static readonly int FRAME_backwd15 = 187;
	public static readonly int FRAME_backwd16 = 188;
	public static readonly int FRAME_backwd17 = 189;
	public static readonly int FRAME_backwd18 = 190;
	public static readonly int FRAME_backwd19 = 191;
	public static readonly int FRAME_backwd20 = 192;
	public static readonly int FRAME_backwd21 = 193;
	public static readonly int FRAME_backwd22 = 194;
	public static readonly int FRAME_backwd23 = 195;
	public static readonly int FRAME_backwd24 = 196;
	public static readonly int FRAME_attak101 = 197;
	public static readonly int FRAME_attak102 = 198;
	public static readonly int FRAME_attak103 = 199;
	public static readonly int FRAME_attak104 = 200;
	public static readonly int FRAME_attak105 = 201;
	public static readonly int FRAME_attak106 = 202;
	public static readonly int FRAME_attak107 = 203;
	public static readonly int FRAME_attak108 = 204;
	public static readonly float MODEL_SCALE = 1.000000f;
	private static int sound_pain1;
	private static int sound_pain2;
	private static int sound_death1;
	private static int sound_death2;
	private static int sound_sight;
	private static int sound_search1;
	private static int sound_search2;

	private static readonly EntThinkAdapter hover_reattack = new("hover_reattack", self =>
	{
		if (self.enemy.health > 0)
		{
			if (GameUtil.visible(self, self.enemy))
			{
				if (Lib.random() <= 0.6)
				{
					self.monsterinfo.currentmove = M_Hover.hover_move_attack1;

					return true;
				}
			}
		}

		self.monsterinfo.currentmove = M_Hover.hover_move_end_attack;

		return true;
	});

	private static readonly EntThinkAdapter hover_fire_blaster = new("hover_fire_blaster", self =>
	{
		float[] start = { 0, 0, 0 };
		float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
		float[] end = { 0, 0, 0 };
		float[] dir = { 0, 0, 0 };
		int effect;

		if (self.s.frame == M_Hover.FRAME_attak104)
			effect = Defines.EF_HYPERBLASTER;
		else
			effect = 0;

		Math3D.AngleVectors(self.s.angles, forward, right, null);
		Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[Defines.MZ2_HOVER_BLASTER_1], forward, right, start);

		Math3D.VectorCopy(self.enemy.s.origin, end);
		end[2] += self.enemy.viewheight;
		Math3D.VectorSubtract(end, start, dir);

		Monster.monster_fire_blaster(self, start, dir, 1, 1000, Defines.MZ2_HOVER_BLASTER_1, effect);

		return true;
	});

	private static readonly EntThinkAdapter hover_stand = new("hover_stand", self =>
	{
		self.monsterinfo.currentmove = M_Hover.hover_move_stand;

		return true;
	});

	private static readonly EntThinkAdapter hover_run = new("hover_run", self =>
	{
		if ((self.monsterinfo.aiflags & Defines.AI_STAND_GROUND) != 0)
			self.monsterinfo.currentmove = M_Hover.hover_move_stand;
		else
			self.monsterinfo.currentmove = M_Hover.hover_move_run;

		return true;
	});

	private static readonly EntThinkAdapter hover_walk = new("hover_walk", self =>
	{
		self.monsterinfo.currentmove = M_Hover.hover_move_walk;

		return true;
	});

	private static readonly EntThinkAdapter hover_start_attack = new("hover_start_attack", self =>
	{
		self.monsterinfo.currentmove = M_Hover.hover_move_start_attack;

		return true;
	});

	private static readonly EntThinkAdapter hover_attack = new("hover_attack", self =>
	{
		self.monsterinfo.currentmove = M_Hover.hover_move_attack1;

		return true;
	});

	private static readonly EntPainAdapter hover_pain = new("hover_pain", (self, other, kick, damage) =>
	{
		if (self.health < self.max_health / 2)
			self.s.skinnum = 1;

		if (GameBase.level.time < self.pain_debounce_time)
			return;

		self.pain_debounce_time = GameBase.level.time + 3;

		if (GameBase.skill.value == 3)
			return; // no pain anims in nightmare

		if (damage <= 25)
		{
			if (Lib.random() < 0.5)
			{
				GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Hover.sound_pain1, 1, Defines.ATTN_NORM, 0);
				self.monsterinfo.currentmove = M_Hover.hover_move_pain3;
			}
			else
			{
				GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Hover.sound_pain2, 1, Defines.ATTN_NORM, 0);
				self.monsterinfo.currentmove = M_Hover.hover_move_pain2;
			}
		}
		else
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Hover.sound_pain1, 1, Defines.ATTN_NORM, 0);
			self.monsterinfo.currentmove = M_Hover.hover_move_pain1;
		}
	});

	private static readonly EntThinkAdapter hover_deadthink = new("hover_deadthink", self =>
	{
		if (null == self.groundentity && GameBase.level.time < self.timestamp)
		{
			self.nextthink = GameBase.level.time + Defines.FRAMETIME;

			return true;
		}

		GameMisc.BecomeExplosion1(self);

		return true;
	});

	private static readonly EntThinkAdapter hover_dead = new("hover_dead", self =>
	{
		Math3D.VectorSet(self.mins, -16, -16, -24);
		Math3D.VectorSet(self.maxs, 16, 16, -8);
		self.movetype = Defines.MOVETYPE_TOSS;
		self.think = M_Hover.hover_deadthink;
		self.nextthink = GameBase.level.time + Defines.FRAMETIME;
		self.timestamp = GameBase.level.time + 15;
		GameBase.gi.linkentity(self);

		return true;
	});

	private static readonly EntDieAdapter hover_die = new("hover_die", (self, inflictor, attacker, damage, point) =>
	{
		int n;

		//	check for gib
		if (self.health <= self.gib_health)
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_NORM, 0);

			for (n = 0; n < 2; n++)
				GameMisc.ThrowGib(self, "models/objects/gibs/bone/tris.md2", damage, Defines.GIB_ORGANIC);

			for (n = 0; n < 2; n++)
				GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC);

			GameMisc.ThrowHead(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC);
			self.deadflag = Defines.DEAD_DEAD;

			return;
		}

		if (self.deadflag == Defines.DEAD_DEAD)
			return;

		//	regular death
		if (Lib.random() < 0.5)
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Hover.sound_death1, 1, Defines.ATTN_NORM, 0);
		else
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Hover.sound_death2, 1, Defines.ATTN_NORM, 0);

		self.deadflag = Defines.DEAD_DEAD;
		self.takedamage = Defines.DAMAGE_YES;
		self.monsterinfo.currentmove = M_Hover.hover_move_death1;
	});

	private static readonly EntInteractAdapter hover_sight = new("hover_sight", (self, other) =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Hover.sound_sight, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly EntThinkAdapter hover_search = new("hover_search", self =>
	{
		if (Lib.random() < 0.5)
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Hover.sound_search1, 1, Defines.ATTN_NORM, 0);
		else
			GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Hover.sound_search2, 1, Defines.ATTN_NORM, 0);

		return true;
	});

	private static readonly mframe_t[] hover_frames_stand =
	{
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null)
	};

	private static readonly mmove_t hover_move_stand = new(M_Hover.FRAME_stand01, M_Hover.FRAME_stand30, M_Hover.hover_frames_stand, null);

	private static readonly mframe_t[] hover_frames_stop1 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t hover_move_stop1 = new(M_Hover.FRAME_stop101, M_Hover.FRAME_stop109, M_Hover.hover_frames_stop1, null);

	private static readonly mframe_t[] hover_frames_stop2 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t hover_move_stop2 = new(M_Hover.FRAME_stop201, M_Hover.FRAME_stop208, M_Hover.hover_frames_stop2, null);

	private static readonly mframe_t[] hover_frames_takeoff =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -2, null),
		new(GameAI.ai_move, 5, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, -1, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, -6, null),
		new(GameAI.ai_move, -9, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t hover_move_takeoff = new(M_Hover.FRAME_takeof01, M_Hover.FRAME_takeof30, M_Hover.hover_frames_takeoff, null);

	private static readonly mframe_t[] hover_frames_pain3 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t hover_move_pain3 = new(M_Hover.FRAME_pain301, M_Hover.FRAME_pain309, M_Hover.hover_frames_pain3, M_Hover.hover_run);

	private static readonly mframe_t[] hover_frames_pain2 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t hover_move_pain2 = new(M_Hover.FRAME_pain201, M_Hover.FRAME_pain212, M_Hover.hover_frames_pain2, M_Hover.hover_run);

	private static readonly mframe_t[] hover_frames_pain1 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, -8, null),
		new(GameAI.ai_move, -4, null),
		new(GameAI.ai_move, -6, null),
		new(GameAI.ai_move, -4, null),
		new(GameAI.ai_move, -3, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 7, null),
		new(GameAI.ai_move, 1, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 5, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 4, null)
	};

	private static readonly mmove_t hover_move_pain1 = new(M_Hover.FRAME_pain101, M_Hover.FRAME_pain128, M_Hover.hover_frames_pain1, M_Hover.hover_run);
	private static readonly mframe_t[] hover_frames_land = { new(GameAI.ai_move, 0, null) };
	private static mmove_t hover_move_land = new(M_Hover.FRAME_land01, M_Hover.FRAME_land01, M_Hover.hover_frames_land, null);

	private static readonly mframe_t[] hover_frames_forward =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t hover_move_forward = new(M_Hover.FRAME_forwrd01, M_Hover.FRAME_forwrd35, M_Hover.hover_frames_forward, null);

	private static readonly mframe_t[] hover_frames_walk =
	{
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null),
		new(GameAI.ai_walk, 4, null)
	};

	private static readonly mmove_t hover_move_walk = new(M_Hover.FRAME_forwrd01, M_Hover.FRAME_forwrd35, M_Hover.hover_frames_walk, null);

	private static readonly mframe_t[] hover_frames_run =
	{
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null),
		new(GameAI.ai_run, 10, null)
	};

	private static readonly mmove_t hover_move_run = new(M_Hover.FRAME_forwrd01, M_Hover.FRAME_forwrd35, M_Hover.hover_frames_run, null);

	private static readonly mframe_t[] hover_frames_death1 =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -10, null),
		new(GameAI.ai_move, 3, null),
		new(GameAI.ai_move, 5, null),
		new(GameAI.ai_move, 4, null),
		new(GameAI.ai_move, 7, null)
	};

	private static readonly mmove_t hover_move_death1 =
		new(M_Hover.FRAME_death101, M_Hover.FRAME_death111, M_Hover.hover_frames_death1, M_Hover.hover_dead);

	private static readonly mframe_t[] hover_frames_backward =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static mmove_t hover_move_backward = new(M_Hover.FRAME_backwd01, M_Hover.FRAME_backwd24, M_Hover.hover_frames_backward, null);

	private static readonly mframe_t[] hover_frames_start_attack =
	{
		new(GameAI.ai_charge, 1, null), new(GameAI.ai_charge, 1, null), new(GameAI.ai_charge, 1, null)
	};

	private static readonly mmove_t hover_move_start_attack =
		new(M_Hover.FRAME_attak101, M_Hover.FRAME_attak103, M_Hover.hover_frames_start_attack, M_Hover.hover_attack);

	private static readonly mframe_t[] hover_frames_attack1 =
	{
		new(GameAI.ai_charge, -10, M_Hover.hover_fire_blaster),
		new(GameAI.ai_charge, -10, M_Hover.hover_fire_blaster),
		new(GameAI.ai_charge, 0, M_Hover.hover_reattack)
	};

	private static readonly mmove_t hover_move_attack1 = new(M_Hover.FRAME_attak104, M_Hover.FRAME_attak106, M_Hover.hover_frames_attack1, null);
	private static readonly mframe_t[] hover_frames_end_attack = { new(GameAI.ai_charge, 1, null), new(GameAI.ai_charge, 1, null) };

	private static readonly mmove_t hover_move_end_attack =
		new(M_Hover.FRAME_attak107, M_Hover.FRAME_attak108, M_Hover.hover_frames_end_attack, M_Hover.hover_run);

	/*
	 * QUAKED monster_hover (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
	 * Trigger_Spawn Sight
	 */
	public static void SP_monster_hover(edict_t self)
	{
		if (GameBase.deathmatch.value != 0)
		{
			GameUtil.G_FreeEdict(self);

			return;
		}

		M_Hover.sound_pain1 = GameBase.gi.soundindex("hover/hovpain1.wav");
		M_Hover.sound_pain2 = GameBase.gi.soundindex("hover/hovpain2.wav");
		M_Hover.sound_death1 = GameBase.gi.soundindex("hover/hovdeth1.wav");
		M_Hover.sound_death2 = GameBase.gi.soundindex("hover/hovdeth2.wav");
		M_Hover.sound_sight = GameBase.gi.soundindex("hover/hovsght1.wav");
		M_Hover.sound_search1 = GameBase.gi.soundindex("hover/hovsrch1.wav");
		M_Hover.sound_search2 = GameBase.gi.soundindex("hover/hovsrch2.wav");

		GameBase.gi.soundindex("hover/hovatck1.wav");

		self.s.sound = GameBase.gi.soundindex("hover/hovidle1.wav");

		self.movetype = Defines.MOVETYPE_STEP;
		self.solid = Defines.SOLID_BBOX;
		self.s.modelindex = GameBase.gi.modelindex("models/monsters/hover/tris.md2");
		Math3D.VectorSet(self.mins, -24, -24, -24);
		Math3D.VectorSet(self.maxs, 24, 24, 32);

		self.health = 240;
		self.gib_health = -100;
		self.mass = 150;

		self.pain = M_Hover.hover_pain;
		self.die = M_Hover.hover_die;

		self.monsterinfo.stand = M_Hover.hover_stand;
		self.monsterinfo.walk = M_Hover.hover_walk;
		self.monsterinfo.run = M_Hover.hover_run;

		//	 self.monsterinfo.dodge = hover_dodge;
		self.monsterinfo.attack = M_Hover.hover_start_attack;
		self.monsterinfo.sight = M_Hover.hover_sight;
		self.monsterinfo.search = M_Hover.hover_search;

		GameBase.gi.linkentity(self);

		self.monsterinfo.currentmove = M_Hover.hover_move_stand;
		self.monsterinfo.scale = M_Hover.MODEL_SCALE;

		GameAI.flymonster_start.think(self);
	}
}
