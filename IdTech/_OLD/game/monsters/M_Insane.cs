/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
namespace Quake2Sharp.game.monsters;

using adapters;
using types;
using util;

public class M_Insane
{
	//	This file generated by ModelGen - Do NOT Modify
	public static readonly int FRAME_stand1 = 0;
	public static readonly int FRAME_stand2 = 1;
	public static readonly int FRAME_stand3 = 2;
	public static readonly int FRAME_stand4 = 3;
	public static readonly int FRAME_stand5 = 4;
	public static readonly int FRAME_stand6 = 5;
	public static readonly int FRAME_stand7 = 6;
	public static readonly int FRAME_stand8 = 7;
	public static readonly int FRAME_stand9 = 8;
	public static readonly int FRAME_stand10 = 9;
	public static readonly int FRAME_stand11 = 10;
	public static readonly int FRAME_stand12 = 11;
	public static readonly int FRAME_stand13 = 12;
	public static readonly int FRAME_stand14 = 13;
	public static readonly int FRAME_stand15 = 14;
	public static readonly int FRAME_stand16 = 15;
	public static readonly int FRAME_stand17 = 16;
	public static readonly int FRAME_stand18 = 17;
	public static readonly int FRAME_stand19 = 18;
	public static readonly int FRAME_stand20 = 19;
	public static readonly int FRAME_stand21 = 20;
	public static readonly int FRAME_stand22 = 21;
	public static readonly int FRAME_stand23 = 22;
	public static readonly int FRAME_stand24 = 23;
	public static readonly int FRAME_stand25 = 24;
	public static readonly int FRAME_stand26 = 25;
	public static readonly int FRAME_stand27 = 26;
	public static readonly int FRAME_stand28 = 27;
	public static readonly int FRAME_stand29 = 28;
	public static readonly int FRAME_stand30 = 29;
	public static readonly int FRAME_stand31 = 30;
	public static readonly int FRAME_stand32 = 31;
	public static readonly int FRAME_stand33 = 32;
	public static readonly int FRAME_stand34 = 33;
	public static readonly int FRAME_stand35 = 34;
	public static readonly int FRAME_stand36 = 35;
	public static readonly int FRAME_stand37 = 36;
	public static readonly int FRAME_stand38 = 37;
	public static readonly int FRAME_stand39 = 38;
	public static readonly int FRAME_stand40 = 39;
	public static readonly int FRAME_stand41 = 40;
	public static readonly int FRAME_stand42 = 41;
	public static readonly int FRAME_stand43 = 42;
	public static readonly int FRAME_stand44 = 43;
	public static readonly int FRAME_stand45 = 44;
	public static readonly int FRAME_stand46 = 45;
	public static readonly int FRAME_stand47 = 46;
	public static readonly int FRAME_stand48 = 47;
	public static readonly int FRAME_stand49 = 48;
	public static readonly int FRAME_stand50 = 49;
	public static readonly int FRAME_stand51 = 50;
	public static readonly int FRAME_stand52 = 51;
	public static readonly int FRAME_stand53 = 52;
	public static readonly int FRAME_stand54 = 53;
	public static readonly int FRAME_stand55 = 54;
	public static readonly int FRAME_stand56 = 55;
	public static readonly int FRAME_stand57 = 56;
	public static readonly int FRAME_stand58 = 57;
	public static readonly int FRAME_stand59 = 58;
	public static readonly int FRAME_stand60 = 59;
	public static readonly int FRAME_stand61 = 60;
	public static readonly int FRAME_stand62 = 61;
	public static readonly int FRAME_stand63 = 62;
	public static readonly int FRAME_stand64 = 63;
	public static readonly int FRAME_stand65 = 64;
	public static readonly int FRAME_stand66 = 65;
	public static readonly int FRAME_stand67 = 66;
	public static readonly int FRAME_stand68 = 67;
	public static readonly int FRAME_stand69 = 68;
	public static readonly int FRAME_stand70 = 69;
	public static readonly int FRAME_stand71 = 70;
	public static readonly int FRAME_stand72 = 71;
	public static readonly int FRAME_stand73 = 72;
	public static readonly int FRAME_stand74 = 73;
	public static readonly int FRAME_stand75 = 74;
	public static readonly int FRAME_stand76 = 75;
	public static readonly int FRAME_stand77 = 76;
	public static readonly int FRAME_stand78 = 77;
	public static readonly int FRAME_stand79 = 78;
	public static readonly int FRAME_stand80 = 79;
	public static readonly int FRAME_stand81 = 80;
	public static readonly int FRAME_stand82 = 81;
	public static readonly int FRAME_stand83 = 82;
	public static readonly int FRAME_stand84 = 83;
	public static readonly int FRAME_stand85 = 84;
	public static readonly int FRAME_stand86 = 85;
	public static readonly int FRAME_stand87 = 86;
	public static readonly int FRAME_stand88 = 87;
	public static readonly int FRAME_stand89 = 88;
	public static readonly int FRAME_stand90 = 89;
	public static readonly int FRAME_stand91 = 90;
	public static readonly int FRAME_stand92 = 91;
	public static readonly int FRAME_stand93 = 92;
	public static readonly int FRAME_stand94 = 93;
	public static readonly int FRAME_stand95 = 94;
	public static readonly int FRAME_stand96 = 95;
	public static readonly int FRAME_stand97 = 96;
	public static readonly int FRAME_stand98 = 97;
	public static readonly int FRAME_stand99 = 98;
	public static readonly int FRAME_stand100 = 99;
	public static readonly int FRAME_stand101 = 100;
	public static readonly int FRAME_stand102 = 101;
	public static readonly int FRAME_stand103 = 102;
	public static readonly int FRAME_stand104 = 103;
	public static readonly int FRAME_stand105 = 104;
	public static readonly int FRAME_stand106 = 105;
	public static readonly int FRAME_stand107 = 106;
	public static readonly int FRAME_stand108 = 107;
	public static readonly int FRAME_stand109 = 108;
	public static readonly int FRAME_stand110 = 109;
	public static readonly int FRAME_stand111 = 110;
	public static readonly int FRAME_stand112 = 111;
	public static readonly int FRAME_stand113 = 112;
	public static readonly int FRAME_stand114 = 113;
	public static readonly int FRAME_stand115 = 114;
	public static readonly int FRAME_stand116 = 115;
	public static readonly int FRAME_stand117 = 116;
	public static readonly int FRAME_stand118 = 117;
	public static readonly int FRAME_stand119 = 118;
	public static readonly int FRAME_stand120 = 119;
	public static readonly int FRAME_stand121 = 120;
	public static readonly int FRAME_stand122 = 121;
	public static readonly int FRAME_stand123 = 122;
	public static readonly int FRAME_stand124 = 123;
	public static readonly int FRAME_stand125 = 124;
	public static readonly int FRAME_stand126 = 125;
	public static readonly int FRAME_stand127 = 126;
	public static readonly int FRAME_stand128 = 127;
	public static readonly int FRAME_stand129 = 128;
	public static readonly int FRAME_stand130 = 129;
	public static readonly int FRAME_stand131 = 130;
	public static readonly int FRAME_stand132 = 131;
	public static readonly int FRAME_stand133 = 132;
	public static readonly int FRAME_stand134 = 133;
	public static readonly int FRAME_stand135 = 134;
	public static readonly int FRAME_stand136 = 135;
	public static readonly int FRAME_stand137 = 136;
	public static readonly int FRAME_stand138 = 137;
	public static readonly int FRAME_stand139 = 138;
	public static readonly int FRAME_stand140 = 139;
	public static readonly int FRAME_stand141 = 140;
	public static readonly int FRAME_stand142 = 141;
	public static readonly int FRAME_stand143 = 142;
	public static readonly int FRAME_stand144 = 143;
	public static readonly int FRAME_stand145 = 144;
	public static readonly int FRAME_stand146 = 145;
	public static readonly int FRAME_stand147 = 146;
	public static readonly int FRAME_stand148 = 147;
	public static readonly int FRAME_stand149 = 148;
	public static readonly int FRAME_stand150 = 149;
	public static readonly int FRAME_stand151 = 150;
	public static readonly int FRAME_stand152 = 151;
	public static readonly int FRAME_stand153 = 152;
	public static readonly int FRAME_stand154 = 153;
	public static readonly int FRAME_stand155 = 154;
	public static readonly int FRAME_stand156 = 155;
	public static readonly int FRAME_stand157 = 156;
	public static readonly int FRAME_stand158 = 157;
	public static readonly int FRAME_stand159 = 158;
	public static readonly int FRAME_stand160 = 159;
	public static readonly int FRAME_walk27 = 160;
	public static readonly int FRAME_walk28 = 161;
	public static readonly int FRAME_walk29 = 162;
	public static readonly int FRAME_walk30 = 163;
	public static readonly int FRAME_walk31 = 164;
	public static readonly int FRAME_walk32 = 165;
	public static readonly int FRAME_walk33 = 166;
	public static readonly int FRAME_walk34 = 167;
	public static readonly int FRAME_walk35 = 168;
	public static readonly int FRAME_walk36 = 169;
	public static readonly int FRAME_walk37 = 170;
	public static readonly int FRAME_walk38 = 171;
	public static readonly int FRAME_walk39 = 172;
	public static readonly int FRAME_walk1 = 173;
	public static readonly int FRAME_walk2 = 174;
	public static readonly int FRAME_walk3 = 175;
	public static readonly int FRAME_walk4 = 176;
	public static readonly int FRAME_walk5 = 177;
	public static readonly int FRAME_walk6 = 178;
	public static readonly int FRAME_walk7 = 179;
	public static readonly int FRAME_walk8 = 180;
	public static readonly int FRAME_walk9 = 181;
	public static readonly int FRAME_walk10 = 182;
	public static readonly int FRAME_walk11 = 183;
	public static readonly int FRAME_walk12 = 184;
	public static readonly int FRAME_walk13 = 185;
	public static readonly int FRAME_walk14 = 186;
	public static readonly int FRAME_walk15 = 187;
	public static readonly int FRAME_walk16 = 188;
	public static readonly int FRAME_walk17 = 189;
	public static readonly int FRAME_walk18 = 190;
	public static readonly int FRAME_walk19 = 191;
	public static readonly int FRAME_walk20 = 192;
	public static readonly int FRAME_walk21 = 193;
	public static readonly int FRAME_walk22 = 194;
	public static readonly int FRAME_walk23 = 195;
	public static readonly int FRAME_walk24 = 196;
	public static readonly int FRAME_walk25 = 197;
	public static readonly int FRAME_walk26 = 198;
	public static readonly int FRAME_st_pain2 = 199;
	public static readonly int FRAME_st_pain3 = 200;
	public static readonly int FRAME_st_pain4 = 201;
	public static readonly int FRAME_st_pain5 = 202;
	public static readonly int FRAME_st_pain6 = 203;
	public static readonly int FRAME_st_pain7 = 204;
	public static readonly int FRAME_st_pain8 = 205;
	public static readonly int FRAME_st_pain9 = 206;
	public static readonly int FRAME_st_pain10 = 207;
	public static readonly int FRAME_st_pain11 = 208;
	public static readonly int FRAME_st_pain12 = 209;
	public static readonly int FRAME_st_death2 = 210;
	public static readonly int FRAME_st_death3 = 211;
	public static readonly int FRAME_st_death4 = 212;
	public static readonly int FRAME_st_death5 = 213;
	public static readonly int FRAME_st_death6 = 214;
	public static readonly int FRAME_st_death7 = 215;
	public static readonly int FRAME_st_death8 = 216;
	public static readonly int FRAME_st_death9 = 217;
	public static readonly int FRAME_st_death10 = 218;
	public static readonly int FRAME_st_death11 = 219;
	public static readonly int FRAME_st_death12 = 220;
	public static readonly int FRAME_st_death13 = 221;
	public static readonly int FRAME_st_death14 = 222;
	public static readonly int FRAME_st_death15 = 223;
	public static readonly int FRAME_st_death16 = 224;
	public static readonly int FRAME_st_death17 = 225;
	public static readonly int FRAME_st_death18 = 226;
	public static readonly int FRAME_crawl1 = 227;
	public static readonly int FRAME_crawl2 = 228;
	public static readonly int FRAME_crawl3 = 229;
	public static readonly int FRAME_crawl4 = 230;
	public static readonly int FRAME_crawl5 = 231;
	public static readonly int FRAME_crawl6 = 232;
	public static readonly int FRAME_crawl7 = 233;
	public static readonly int FRAME_crawl8 = 234;
	public static readonly int FRAME_crawl9 = 235;
	public static readonly int FRAME_cr_pain2 = 236;
	public static readonly int FRAME_cr_pain3 = 237;
	public static readonly int FRAME_cr_pain4 = 238;
	public static readonly int FRAME_cr_pain5 = 239;
	public static readonly int FRAME_cr_pain6 = 240;
	public static readonly int FRAME_cr_pain7 = 241;
	public static readonly int FRAME_cr_pain8 = 242;
	public static readonly int FRAME_cr_pain9 = 243;
	public static readonly int FRAME_cr_pain10 = 244;
	public static readonly int FRAME_cr_death10 = 245;
	public static readonly int FRAME_cr_death11 = 246;
	public static readonly int FRAME_cr_death12 = 247;
	public static readonly int FRAME_cr_death13 = 248;
	public static readonly int FRAME_cr_death14 = 249;
	public static readonly int FRAME_cr_death15 = 250;
	public static readonly int FRAME_cr_death16 = 251;
	public static readonly int FRAME_cross1 = 252;
	public static readonly int FRAME_cross2 = 253;
	public static readonly int FRAME_cross3 = 254;
	public static readonly int FRAME_cross4 = 255;
	public static readonly int FRAME_cross5 = 256;
	public static readonly int FRAME_cross6 = 257;
	public static readonly int FRAME_cross7 = 258;
	public static readonly int FRAME_cross8 = 259;
	public static readonly int FRAME_cross9 = 260;
	public static readonly int FRAME_cross10 = 261;
	public static readonly int FRAME_cross11 = 262;
	public static readonly int FRAME_cross12 = 263;
	public static readonly int FRAME_cross13 = 264;
	public static readonly int FRAME_cross14 = 265;
	public static readonly int FRAME_cross15 = 266;
	public static readonly int FRAME_cross16 = 267;
	public static readonly int FRAME_cross17 = 268;
	public static readonly int FRAME_cross18 = 269;
	public static readonly int FRAME_cross19 = 270;
	public static readonly int FRAME_cross20 = 271;
	public static readonly int FRAME_cross21 = 272;
	public static readonly int FRAME_cross22 = 273;
	public static readonly int FRAME_cross23 = 274;
	public static readonly int FRAME_cross24 = 275;
	public static readonly int FRAME_cross25 = 276;
	public static readonly int FRAME_cross26 = 277;
	public static readonly int FRAME_cross27 = 278;
	public static readonly int FRAME_cross28 = 279;
	public static readonly int FRAME_cross29 = 280;
	public static readonly int FRAME_cross30 = 281;
	public static readonly float MODEL_SCALE = 1.000000f;
	private static int sound_fist;
	private static int sound_shake;
	private static int sound_moan;
	private static readonly int[] sound_scream = { 0, 0, 0, 0, 0, 0, 0, 0 };

	private static readonly EntThinkAdapter insane_fist = new("insane_fist", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Insane.sound_fist, 1, Defines.ATTN_IDLE, 0);

		return true;
	});

	private static readonly EntThinkAdapter insane_shake = new("insane_shake", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Insane.sound_shake, 1, Defines.ATTN_IDLE, 0);

		return true;
	});

	private static readonly EntThinkAdapter insane_moan = new("insane_moan", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Insane.sound_moan, 1, Defines.ATTN_IDLE, 0);

		return true;
	});

	private static readonly EntThinkAdapter insane_scream = new("insane_scream", self =>
	{
		GameBase.gi.sound(self, Defines.CHAN_VOICE, M_Insane.sound_scream[Lib.rand() % 8], 1, Defines.ATTN_IDLE, 0);

		return true;
	});

	private static readonly EntThinkAdapter insane_cross = new("insane_cross", self =>
	{
		if (Lib.random() < 0.8)
			self.monsterinfo.currentmove = M_Insane.insane_move_cross;
		else
			self.monsterinfo.currentmove = M_Insane.insane_move_struggle_cross;

		return true;
	});

	private static readonly EntThinkAdapter insane_walk = new("insane_walk", self =>
	{
		if ((self.spawnflags & 16) != 0) // Hold Ground?
		{
			if (self.s.frame == M_Insane.FRAME_cr_pain10)
			{
				self.monsterinfo.currentmove = M_Insane.insane_move_down;

				return true;
			}
		}

		if ((self.spawnflags & 4) != 0)
			self.monsterinfo.currentmove = M_Insane.insane_move_crawl;
		else if (Lib.random() <= 0.5)
			self.monsterinfo.currentmove = M_Insane.insane_move_walk_normal;
		else
			self.monsterinfo.currentmove = M_Insane.insane_move_walk_insane;

		return true;
	});

	private static readonly EntThinkAdapter insane_run = new("insane_run", self =>
	{
		if ((self.spawnflags & 16) != 0) // Hold Ground?
		{
			if (self.s.frame == M_Insane.FRAME_cr_pain10)
			{
				self.monsterinfo.currentmove = M_Insane.insane_move_down;

				return true;
			}
		}

		if ((self.spawnflags & 4) != 0) // Crawling?
			self.monsterinfo.currentmove = M_Insane.insane_move_runcrawl;
		else if (Lib.random() <= 0.5) // Else, mix it up
			self.monsterinfo.currentmove = M_Insane.insane_move_run_normal;
		else
			self.monsterinfo.currentmove = M_Insane.insane_move_run_insane;

		return true;
	});

	private static readonly EntPainAdapter insane_pain = new("insane_pain", (self, other, kick, damage) =>
	{
		int l, r;

		//	 if (self.health < (self.max_health / 2))
		//		 self.s.skinnum = 1;

		if (GameBase.level.time < self.pain_debounce_time)
			return;

		self.pain_debounce_time = GameBase.level.time + 3;

		r = 1 + (Lib.rand() & 1);

		if (self.health < 25)
			l = 25;
		else if (self.health < 50)
			l = 50;
		else if (self.health < 75)
			l = 75;
		else
			l = 100;

		GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("player/male/pain" + l + "_" + r + ".wav"), 1, Defines.ATTN_IDLE, 0);

		if (GameBase.skill.value == 3)
			return; // no pain anims in nightmare

		// Don't go into pain frames if crucified.
		if ((self.spawnflags & 8) != 0)
		{
			self.monsterinfo.currentmove = M_Insane.insane_move_struggle_cross;

			return;
		}

		if ((self.s.frame >= M_Insane.FRAME_crawl1 && self.s.frame <= M_Insane.FRAME_crawl9)
		    || (self.s.frame >= M_Insane.FRAME_stand99 && self.s.frame <= M_Insane.FRAME_stand160))
			self.monsterinfo.currentmove = M_Insane.insane_move_crawl_pain;
		else
			self.monsterinfo.currentmove = M_Insane.insane_move_stand_pain;
	});

	private static readonly EntThinkAdapter insane_onground = new("insane_onground", self =>
	{
		self.monsterinfo.currentmove = M_Insane.insane_move_down;

		return true;
	});

	private static readonly EntThinkAdapter insane_checkdown = new("insane_checkdown", self =>
	{
		//			if ( (self.s.frame == FRAME_stand94) || (self.s.frame ==
		// FRAME_stand65) )
		if ((self.spawnflags & 32) != 0) // Always stand
			return true;

		if (Lib.random() < 0.3)
		{
			if (Lib.random() < 0.5)
				self.monsterinfo.currentmove = M_Insane.insane_move_uptodown;
			else
				self.monsterinfo.currentmove = M_Insane.insane_move_jumpdown;
		}

		return true;
	});

	private static readonly EntThinkAdapter insane_checkup = new("insane_checkup", self =>
	{
		//			If Hold_Ground and Crawl are set
		if ((self.spawnflags & 4) != 0 && (self.spawnflags & 16) != 0)
			return true;

		if (Lib.random() < 0.5)
			self.monsterinfo.currentmove = M_Insane.insane_move_downtoup;

		return true;
	});

	private static readonly EntThinkAdapter insane_stand = new("insane_stand", self =>
	{
		if ((self.spawnflags & 8) != 0) // If crucified
		{
			self.monsterinfo.currentmove = M_Insane.insane_move_cross;
			self.monsterinfo.aiflags |= Defines.AI_STAND_GROUND;
		}

		// If Hold_Ground and Crawl are set
		else if ((self.spawnflags & 4) != 0 && (self.spawnflags & 16) != 0)
			self.monsterinfo.currentmove = M_Insane.insane_move_down;
		else if (Lib.random() < 0.5)
			self.monsterinfo.currentmove = M_Insane.insane_move_stand_normal;
		else
			self.monsterinfo.currentmove = M_Insane.insane_move_stand_insane;

		return true;
	});

	private static readonly EntThinkAdapter insane_dead = new("insane_dead", self =>
	{
		if ((self.spawnflags & 8) != 0)
			self.flags |= Defines.FL_FLY;
		else
		{
			Math3D.VectorSet(self.mins, -16, -16, -24);
			Math3D.VectorSet(self.maxs, 16, 16, -8);
			self.movetype = Defines.MOVETYPE_TOSS;
		}

		self.svflags |= Defines.SVF_DEADMONSTER;
		self.nextthink = 0;
		GameBase.gi.linkentity(self);

		return true;
	});

	private static readonly EntDieAdapter insane_die = new("insane_die", (self, inflictor, attacker, damage, point) =>
	{
		int n;

		if (self.health <= self.gib_health)
		{
			GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_IDLE, 0);

			for (n = 0; n < 2; n++)
				GameMisc.ThrowGib(self, "models/objects/gibs/bone/tris.md2", damage, Defines.GIB_ORGANIC);

			for (n = 0; n < 4; n++)
				GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC);

			GameMisc.ThrowHead(self, "models/objects/gibs/head2/tris.md2", damage, Defines.GIB_ORGANIC);
			self.deadflag = Defines.DEAD_DEAD;

			return;
		}

		if (self.deadflag == Defines.DEAD_DEAD)
			return;

		GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("player/male/death" + (Lib.rand() % 4 + 1) + ".wav"), 1, Defines.ATTN_IDLE, 0);

		self.deadflag = Defines.DEAD_DEAD;
		self.takedamage = Defines.DAMAGE_YES;

		if ((self.spawnflags & 8) != 0)
			M_Insane.insane_dead.think(self);
		else
		{
			if ((self.s.frame >= M_Insane.FRAME_crawl1 && self.s.frame <= M_Insane.FRAME_crawl9)
			    || (self.s.frame >= M_Insane.FRAME_stand99 && self.s.frame <= M_Insane.FRAME_stand160))
				self.monsterinfo.currentmove = M_Insane.insane_move_crawl_death;
			else
				self.monsterinfo.currentmove = M_Insane.insane_move_stand_death;
		}
	});

	private static readonly mframe_t[] insane_frames_stand_normal =
	{
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, M_Insane.insane_checkdown)
	};

	private static readonly mmove_t insane_move_stand_normal =
		new(M_Insane.FRAME_stand60, M_Insane.FRAME_stand65, M_Insane.insane_frames_stand_normal, M_Insane.insane_stand);

	private static readonly mframe_t[] insane_frames_stand_insane =
	{
		new(GameAI.ai_stand, 0, M_Insane.insane_shake),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, null),
		new(GameAI.ai_stand, 0, M_Insane.insane_checkdown)
	};

	private static readonly mmove_t insane_move_stand_insane =
		new(M_Insane.FRAME_stand65, M_Insane.FRAME_stand94, M_Insane.insane_frames_stand_insane, M_Insane.insane_stand);

	private static readonly mframe_t[] insane_frames_uptodown =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, M_Insane.insane_moan),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 2.7f, null),
		new(GameAI.ai_move, 4.1f, null),
		new(GameAI.ai_move, 6f, null),
		new(GameAI.ai_move, 7.6f, null),
		new(GameAI.ai_move, 3.6f, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, M_Insane.insane_fist),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, M_Insane.insane_fist),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t insane_move_uptodown =
		new(M_Insane.FRAME_stand1, M_Insane.FRAME_stand40, M_Insane.insane_frames_uptodown, M_Insane.insane_onground);

	private static readonly mframe_t[] insane_frames_downtoup =
	{
		new(GameAI.ai_move, -0.7f, null), // 41
		new(GameAI.ai_move, -1.2f, null), // 42
		new(GameAI.ai_move, -1.5f, null), // 43
		new(GameAI.ai_move, -4.5f, null), // 44
		new(GameAI.ai_move, -3.5f, null), // 45
		new(GameAI.ai_move, -0.2f, null), // 46
		new(GameAI.ai_move, 0, null), // 47
		new(GameAI.ai_move, -1.3f, null), // 48
		new(GameAI.ai_move, -3, null), // 49
		new(GameAI.ai_move, -2, null), // 50
		new(GameAI.ai_move, 0, null), // 51
		new(GameAI.ai_move, 0, null), // 52
		new(GameAI.ai_move, 0, null), // 53
		new(GameAI.ai_move, -3.3f, null), // 54
		new(GameAI.ai_move, -1.6f, null), // 55
		new(GameAI.ai_move, -0.3f, null), // 56
		new(GameAI.ai_move, 0, null), // 57
		new(GameAI.ai_move, 0, null), // 58
		new(GameAI.ai_move, 0, null) // 59
	};

	private static readonly mmove_t insane_move_downtoup =
		new(M_Insane.FRAME_stand41, M_Insane.FRAME_stand59, M_Insane.insane_frames_downtoup, M_Insane.insane_stand);

	private static readonly mframe_t[] insane_frames_jumpdown =
	{
		new(GameAI.ai_move, 0.2f, null),
		new(GameAI.ai_move, 11.5f, null),
		new(GameAI.ai_move, 5.1f, null),
		new(GameAI.ai_move, 7.1f, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t insane_move_jumpdown =
		new(M_Insane.FRAME_stand96, M_Insane.FRAME_stand100, M_Insane.insane_frames_jumpdown, M_Insane.insane_onground);

	private static readonly mframe_t[] insane_frames_down =
	{
		new(GameAI.ai_move, 0, null), // 100)
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),

		// 110)
		new(GameAI.ai_move, -1.7f, null),
		new(GameAI.ai_move, -1.6f, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, M_Insane.insane_fist),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),

		// 120)
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),

		// 130
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, M_Insane.insane_moan),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),

		// 140
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),

		// 150
		new(GameAI.ai_move, 0.5f, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, -0.2f, M_Insane.insane_scream),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0.2f, null),
		new(GameAI.ai_move, 0.4f, null),
		new(GameAI.ai_move, 0.6f, null),
		new(GameAI.ai_move, 0.8f, null),
		new(GameAI.ai_move, 0.7f, null),
		new(GameAI.ai_move, 0, M_Insane.insane_checkup) // 160
	};

	private static readonly mmove_t insane_move_down =
		new(M_Insane.FRAME_stand100, M_Insane.FRAME_stand160, M_Insane.insane_frames_down, M_Insane.insane_onground);

	private static readonly mframe_t[] insane_frames_walk_normal =
	{
		new(GameAI.ai_walk, 0, M_Insane.insane_scream),
		new(GameAI.ai_walk, 2.5f, null),
		new(GameAI.ai_walk, 3.5f, null),
		new(GameAI.ai_walk, 1.7f, null),
		new(GameAI.ai_walk, 2.3f, null),
		new(GameAI.ai_walk, 2.4f, null),
		new(GameAI.ai_walk, 2.2f, null),
		new(GameAI.ai_walk, 4.2f, null),
		new(GameAI.ai_walk, 5.6f, null),
		new(GameAI.ai_walk, 3.3f, null),
		new(GameAI.ai_walk, 2.4f, null),
		new(GameAI.ai_walk, 0.9f, null),
		new(GameAI.ai_walk, 0, null)
	};

	private static readonly mmove_t insane_move_walk_normal =
		new(M_Insane.FRAME_walk27, M_Insane.FRAME_walk39, M_Insane.insane_frames_walk_normal, M_Insane.insane_walk);

	private static readonly mmove_t insane_move_run_normal =
		new(M_Insane.FRAME_walk27, M_Insane.FRAME_walk39, M_Insane.insane_frames_walk_normal, M_Insane.insane_run);

	private static readonly mframe_t[] insane_frames_walk_insane =
	{
		new(GameAI.ai_walk, 0, M_Insane.insane_scream), // walk 1
		new(GameAI.ai_walk, 3.4f, null), // walk 2
		new(GameAI.ai_walk, 3.6f, null), // 3
		new(GameAI.ai_walk, 2.9f, null), // 4
		new(GameAI.ai_walk, 2.2f, null), // 5
		new(GameAI.ai_walk, 2.6f, null), // 6
		new(GameAI.ai_walk, 0, null), // 7
		new(GameAI.ai_walk, 0.7f, null), // 8
		new(GameAI.ai_walk, 4.8f, null), // 9
		new(GameAI.ai_walk, 5.3f, null), // 10
		new(GameAI.ai_walk, 1.1f, null), // 11
		new(GameAI.ai_walk, 2, null), // 12
		new(GameAI.ai_walk, 0.5f, null), // 13
		new(GameAI.ai_walk, 0, null), // 14
		new(GameAI.ai_walk, 0, null), // 15
		new(GameAI.ai_walk, 4.9f, null), // 16
		new(GameAI.ai_walk, 6.7f, null), // 17
		new(GameAI.ai_walk, 3.8f, null), // 18
		new(GameAI.ai_walk, 2, null), // 19
		new(GameAI.ai_walk, 0.2f, null), // 20
		new(GameAI.ai_walk, 0, null), // 21
		new(GameAI.ai_walk, 3.4f, null), // 22
		new(GameAI.ai_walk, 6.4f, null), // 23
		new(GameAI.ai_walk, 5, null), // 24
		new(GameAI.ai_walk, 1.8f, null), // 25
		new(GameAI.ai_walk, 0, null) // 26
	};

	private static readonly mmove_t insane_move_walk_insane =
		new(M_Insane.FRAME_walk1, M_Insane.FRAME_walk26, M_Insane.insane_frames_walk_insane, M_Insane.insane_walk);

	private static readonly mmove_t insane_move_run_insane =
		new(M_Insane.FRAME_walk1, M_Insane.FRAME_walk26, M_Insane.insane_frames_walk_insane, M_Insane.insane_run);

	private static readonly mframe_t[] insane_frames_stand_pain =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t insane_move_stand_pain =
		new(M_Insane.FRAME_st_pain2, M_Insane.FRAME_st_pain12, M_Insane.insane_frames_stand_pain, M_Insane.insane_run);

	private static readonly mframe_t[] insane_frames_stand_death =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t insane_move_stand_death =
		new(M_Insane.FRAME_st_death2, M_Insane.FRAME_st_death18, M_Insane.insane_frames_stand_death, M_Insane.insane_dead);

	private static readonly mframe_t[] insane_frames_crawl =
	{
		new(GameAI.ai_walk, 0, M_Insane.insane_scream),
		new(GameAI.ai_walk, 1.5f, null),
		new(GameAI.ai_walk, 2.1f, null),
		new(GameAI.ai_walk, 3.6f, null),
		new(GameAI.ai_walk, 2f, null),
		new(GameAI.ai_walk, 0.9f, null),
		new(GameAI.ai_walk, 3f, null),
		new(GameAI.ai_walk, 3.4f, null),
		new(GameAI.ai_walk, 2.4f, null)
	};

	private static readonly mmove_t insane_move_crawl = new(M_Insane.FRAME_crawl1, M_Insane.FRAME_crawl9, M_Insane.insane_frames_crawl, null);
	private static readonly mmove_t insane_move_runcrawl = new(M_Insane.FRAME_crawl1, M_Insane.FRAME_crawl9, M_Insane.insane_frames_crawl, null);

	private static readonly mframe_t[] insane_frames_crawl_pain =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t insane_move_crawl_pain =
		new(M_Insane.FRAME_cr_pain2, M_Insane.FRAME_cr_pain10, M_Insane.insane_frames_crawl_pain, M_Insane.insane_run);

	private static readonly mframe_t[] insane_frames_crawl_death =
	{
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t insane_move_crawl_death =
		new(M_Insane.FRAME_cr_death10, M_Insane.FRAME_cr_death16, M_Insane.insane_frames_crawl_death, M_Insane.insane_dead);

	private static readonly mframe_t[] insane_frames_cross =
	{
		new(GameAI.ai_move, 0, M_Insane.insane_moan),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t insane_move_cross =
		new(M_Insane.FRAME_cross1, M_Insane.FRAME_cross15, M_Insane.insane_frames_cross, M_Insane.insane_cross);

	private static readonly mframe_t[] insane_frames_struggle_cross =
	{
		new(GameAI.ai_move, 0, M_Insane.insane_scream),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null),
		new(GameAI.ai_move, 0, null)
	};

	private static readonly mmove_t insane_move_struggle_cross =
		new(M_Insane.FRAME_cross16, M_Insane.FRAME_cross30, M_Insane.insane_frames_struggle_cross, M_Insane.insane_cross);

	/*
	 * QUAKED misc_insane (1 .5 0) (-16 -16 -24) (16 16 32) Ambush Trigger_Spawn
	 * CRAWL CRUCIFIED STAND_GROUND ALWAYS_STAND
	 */
	public static void SP_misc_insane(edict_t self)
	{
		//	 static int skin = 0; //@@

		if (GameBase.deathmatch.value != 0)
		{
			GameUtil.G_FreeEdict(self);

			return;
		}

		M_Insane.sound_fist = GameBase.gi.soundindex("insane/insane11.wav");
		M_Insane.sound_shake = GameBase.gi.soundindex("insane/insane5.wav");
		M_Insane.sound_moan = GameBase.gi.soundindex("insane/insane7.wav");
		M_Insane.sound_scream[0] = GameBase.gi.soundindex("insane/insane1.wav");
		M_Insane.sound_scream[1] = GameBase.gi.soundindex("insane/insane2.wav");
		M_Insane.sound_scream[2] = GameBase.gi.soundindex("insane/insane3.wav");
		M_Insane.sound_scream[3] = GameBase.gi.soundindex("insane/insane4.wav");
		M_Insane.sound_scream[4] = GameBase.gi.soundindex("insane/insane6.wav");
		M_Insane.sound_scream[5] = GameBase.gi.soundindex("insane/insane8.wav");
		M_Insane.sound_scream[6] = GameBase.gi.soundindex("insane/insane9.wav");
		M_Insane.sound_scream[7] = GameBase.gi.soundindex("insane/insane10.wav");

		self.movetype = Defines.MOVETYPE_STEP;
		self.solid = Defines.SOLID_BBOX;
		self.s.modelindex = GameBase.gi.modelindex("models/monsters/insane/tris.md2");

		Math3D.VectorSet(self.mins, -16, -16, -24);
		Math3D.VectorSet(self.maxs, 16, 16, 32);

		self.health = 100;
		self.gib_health = -50;
		self.mass = 300;

		self.pain = M_Insane.insane_pain;
		self.die = M_Insane.insane_die;

		self.monsterinfo.stand = M_Insane.insane_stand;
		self.monsterinfo.walk = M_Insane.insane_walk;
		self.monsterinfo.run = M_Insane.insane_run;
		self.monsterinfo.dodge = null;
		self.monsterinfo.attack = null;
		self.monsterinfo.melee = null;
		self.monsterinfo.sight = null;
		self.monsterinfo.aiflags |= Defines.AI_GOOD_GUY;

		// @@
		//	 self.s.skinnum = skin;
		//	 skin++;
		//	 if (skin > 12)
		//		 skin = 0;

		GameBase.gi.linkentity(self);

		if ((self.spawnflags & 16) != 0) // Stand Ground
			self.monsterinfo.aiflags |= Defines.AI_STAND_GROUND;

		self.monsterinfo.currentmove = M_Insane.insane_move_stand_normal;

		self.monsterinfo.scale = M_Insane.MODEL_SCALE;

		if ((self.spawnflags & 8) != 0) // Crucified ?
		{
			Math3D.VectorSet(self.mins, -16, 0, 0);
			Math3D.VectorSet(self.maxs, 16, 8, 32);
			self.flags |= Defines.FL_NO_KNOCKBACK;
			GameAI.flymonster_start.think(self);
		}
		else
		{
			GameAI.walkmonster_start.think(self);
			self.s.skinnum = Lib.rand() % 3;
		}
	}
}